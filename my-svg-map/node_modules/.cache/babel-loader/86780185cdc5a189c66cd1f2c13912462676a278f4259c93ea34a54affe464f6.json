{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive } from 'vue';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nconst selectedFertilizer = ref('nitrogen');\nexport default {\n  data() {\n    return {\n      selectedStates: ref([]),\n      currentZoom: 1,\n      name: \"charts\"\n    };\n  },\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr('width', '75%').attr('height', '100%').style(\"position\", \"fixed\").style('left', '25%').style('top', '20%');\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      // Llama a la función después de cargar y agregar el mapa SVG\n      this.getDataFromAPI();\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Obtener todos los elementos \"path\" del SVG\n      const paths = svg.selectAll('path');\n\n      // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n      paths.on('click', this.changeColorOnClick).on('mouseover', this.changeColorOnHover).on('mouseout', this.restoreColorOnHover);\n\n      // Agregar zoom al mapa\n      const zoom = d3.zoom().scaleExtent([1, 8]) // Definir los límites de zoom\n      .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n      svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n      // Inicializar el estado del zoom\n      this.currentZoom = 1;\n    }).catch(error => {\n      console.error(error);\n    });\n    const countries = this.$route.query.countries;\n    if (countries) {\n      const countryList = countries.split(\",\");\n      const selectedCountries = countryList.join(\", \");\n    }\n\n    // Añadir el controlador de eventos al control deslizante\n    const yearSlider = document.getElementById('year-slider');\n    yearSlider.addEventListener('input', event => {\n      this.updateMap(event.target.value);\n    });\n  },\n  methods: {\n    // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n    changeColorOnClick(event) {\n      const path = event.target;\n      if (path.classList.contains('selectedPath')) {\n        // si ya está seleccionado, se quita el color\n        path.style.fill = 'black';\n        path.classList.remove('selectedPath');\n        // se elimina el país de la lista de países seleccionados\n        this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n      } else {\n        // si no está seleccionado, se agrega el color\n        path.style.fill = 'green';\n        path.classList.add('selectedPath');\n        // se agrega el país a la lista de países seleccionados\n        this.selectedStates.push({\n          id: path.id,\n          title: path.getAttribute('title')\n        });\n        console.log(this.selectedStates);\n      }\n    },\n    // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n    changeColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains('selectedPath')) {\n        path.style.fill = 'purple';\n        document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n      }\n    },\n    // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n    restoreColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains('selectedPath')) {\n        path.style.fill = 'black';\n      }\n    },\n    // Funcion para vaciar la array y quitar el color de los paises seleccionados\n    clearSelection() {\n      // Vaciar el array de países seleccionados\n      this.selectedStates.splice(0);\n\n      // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\n      selectedPaths.forEach(element => {\n        element.classList.remove(\"selectedPath\");\n        element.style.fill = \"black\";\n      });\n    },\n    // Función para hacer zoom\n    zoomIn() {\n      this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n      d3.select('svg') // Seleccionar el elemento SVG\n      .transition() // Agregar transición animada al zoom\n      .duration(500) // Duración de la transición\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n\n    // Función para hacer zoom out\n    zoomOut() {\n      this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n      d3.select('svg') // Seleccionar el elemento SVG\n      .transition() // Agregar una transición suave al zoom\n      .duration(500) // Duración de la transición (en milisegundos)\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n\n    // Función para hacer zoom con el scroll del ratón y draggear el mapa\n    zoomed(event) {\n      this.currentZoom = event.transform.k;\n      d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n    },\n\n    navigateToCharts() {\n      const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n      this.$router.push({\n        name: \"charts\",\n        query: {\n          countries: selectedCountries\n        }\n      });\n    },\n    getDataFromAPI() {\n      const apiUrl = `http://49.12.36.190/api/fertilizers-${selectedFertilizer.value}`;\n      axios.get(apiUrl).then(response => {\n        const data = response.data;\n        this.updateMapValues(data);\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    updateMapValues(data) {\n      const paths = document.querySelectorAll('path');\n      const tooltip = document.createElement('div'); // Crea el elemento div para el tooltip\n      tooltip.style.position = 'absolute';\n      tooltip.style.backgroundColor = 'white';\n      tooltip.style.border = '1px solid gray';\n      tooltip.style.padding = '5px';\n      tooltip.style.pointerEvents = 'none';\n      tooltip.style.display = 'none'; // Oculta el tooltip por defecto\n      document.body.appendChild(tooltip); // Agrega el tooltip al body\n\n      paths.forEach(path => {\n        const code = path.getAttribute('id');\n        const value = data.find(item => item.code === code)?.amount ?? 0;\n        path.setAttribute('amount', value);\n        path.addEventListener('mouseover', () => {\n          // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n          tooltip.style.display = 'block'; // Muestra el tooltip\n          tooltip.textContent = `${path.getAttribute('title')}: ${value}`;\n        });\n        path.addEventListener('mousemove', () => {\n          // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n        });\n        path.addEventListener('mouseout', () => {\n          // Oculta el tooltip cuando el mouse sale del elemento \"path\"\n          tooltip.style.display = 'none';\n        });\n      });\n      this.updateMapColors();\n    },\n    createLegend(colorScale, colors) {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById('legend-container');\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n      const legendContainer = document.createElement('div');\n      legendContainer.setAttribute('id', 'legend-container');\n      legendContainer.style.display = 'flex';\n      legendContainer.style.flexDirection = 'row';\n      legendContainer.style.alignItems = 'center';\n      legendContainer.style.justifyContent = 'center';\n      legendContainer.style.marginTop = '10px';\n      colors.forEach((color, index) => {\n        const colorBox = document.createElement('div');\n        colorBox.style.backgroundColor = color;\n        colorBox.style.width = '20px';\n        colorBox.style.height = '20px';\n        colorBox.style.margin = '0 5px';\n        const rangeText = document.createElement('span');\n        rangeText.style.marginLeft = '5px';\n        rangeText.style.marginRight = '10px';\n        const range = colorScale.invertExtent(color);\n        // Caso especial para el primer rango (0.00 - 0.00)\n        if (index === 0) {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\n        } else {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n        }\n        const legendItem = document.createElement('div');\n        legendItem.style.display = 'flex';\n        legendItem.style.alignItems = 'center';\n        legendItem.appendChild(colorBox);\n        legendItem.appendChild(rangeText);\n        legendContainer.appendChild(legendItem);\n      });\n\n      // Agrega la leyenda al final del body\n      document.body.appendChild(legendContainer);\n    },\n    updateMapColors() {\n      const paths = document.querySelectorAll('path');\n      const colors = ['#F5E1F7', '#E6B8E6', '#D7A3D3', '#C68FC6', '#B67AB6', '#A666A3', '#965291', '#854D80', '#73386E', '#62245C'];\n      const amounts = Array.from(paths, path => Number(path.getAttribute('amount')));\n      const maxAmount = Math.max(...amounts);\n      const colorScale = d3.scaleQuantile().domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\n      .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\n\n      paths.forEach(path => {\n        const amount = Number(path.getAttribute('amount'));\n        const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\n        path.style.fill = color;\n      });\n\n      // Crear leyenda\n      this.createLegend(colorScale, colors);\n    },\n    updateFertilizerType(event) {\n      selectedFertilizer.value = event.target.value;\n      this.getDataFromAPI();\n    },\n    addLegend() {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById('map-legend');\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n\n      // A continuación, el código existente para agregar la leyenda\n      const legend = L.control({\n        position: 'bottomright'\n      });\n      legend.onAdd = () => {\n        const div = L.DomUtil.create('div', 'info legend');\n        div.id = 'map-legend'; // Agrega un ID para que podamos seleccionarlo y eliminarlo fácilmente\n        const grades = this.legendGrades;\n        const labels = [];\n        for (let i = 0; i < grades.length; i++) {\n          labels.push('<i style=\"background:' + this.getColor(grades[i] + 1) + '\"></i> ' + grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+'));\n        }\n        div.innerHTML = labels.join('');\n        return div;\n      };\n      legend.addTo(this.map);\n    },\n    updateMap(year) {\n      // Aquí es donde puedes actualizar el mapa con los datos correspondientes al año\n      console.log(\"Año seleccionado:\", year);\n      // Llama a las funciones necesarias para actualizar el mapa aquí\n    },\n\n    playYears() {\n      const startYear = 1961;\n      const endYear = 2019;\n      let currentYear = startYear;\n      const interval = setInterval(() => {\n        updateMap(currentYear);\n        yearSlider.value = currentYear;\n        currentYear++;\n        if (currentYear > endYear) {\n          clearInterval(interval);\n        }\n      }, 1000); // Cambia cada 1000 milisegundos (1 segundo)\n    }\n\n    // const playButton = document.getElementById('play-button');\n    //       playButton.addEventListener('click', playYears);\n  }\n};","map":{"version":3,"names":["ref","reactive","d3","axios","selectedFertilizer","data","selectedStates","currentZoom","name","mounted","svg","select","$refs","chart","append","attr","style","xml","require","then","getDataFromAPI","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","changeColorOnClick","changeColorOnHover","restoreColorOnHover","zoom","scaleExtent","zoomed","call","catch","error","console","countries","$route","query","countryList","split","selectedCountries","join","yearSlider","getElementById","addEventListener","event","updateMap","target","value","methods","path","classList","contains","fill","remove","filter","state","id","add","push","title","getAttribute","log","textContent","clearSelection","splice","selectedPaths","querySelectorAll","forEach","element","zoomIn","Math","min","transition","duration","zoomOut","max","transform","k","navigateToCharts","map","$router","apiUrl","get","response","updateMapValues","tooltip","createElement","position","backgroundColor","border","padding","pointerEvents","display","body","code","find","item","amount","setAttribute","x","clientX","y","clientY","top","left","updateMapColors","createLegend","colorScale","colors","existingLegend","legendContainer","flexDirection","alignItems","justifyContent","marginTop","color","index","colorBox","width","height","margin","rangeText","marginLeft","marginRight","range","invertExtent","toFixed","legendItem","amounts","Array","from","Number","maxAmount","scaleQuantile","domain","slice","updateFertilizerType","addLegend","legend","L","control","onAdd","div","DomUtil","create","grades","legendGrades","labels","i","length","getColor","innerHTML","addTo","year","playYears","startYear","endYear","currentYear","interval","setInterval","clearInterval"],"sources":["/home/albertcasany/public_html/FERTFLORAIMPACT/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n   <br>\n   <button v-if=\"selectedStates.length > 1\" class=\"button-container\" @click=\"navigateToCharts\">Go to charts</button>\n\n   <div class=\"prio\">\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\n      </div>\n      <h2>Selected Countries:</h2>\n      <div style=\"display:inline\">\n         <!-- up to down -->\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\n            {{ state.id }}: {{ state.title }}\n         </h4>\n\n         <!-- right to left -->\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n           {{ state.title }} </h4> -->\n      </div>\n\n   </div>\n   <select @change=\"updateFertilizerType\">\n      <option value=\"nitrogen\">Nitrogen Derived</option>\n      <option value=\"phosphorous\">Phosphorous Derived</option>\n      <option value=\"potassium\">Potassium Derived</option>\n   </select>\n   <div ref=\"chart\" style=\"position: relative; width: 75%; height: 80%; margin-left: 25%; margin-top: 33%;\">\n   </div>\n   <div style=\"display: flex; justify-content: center; margin-top: 10px;\">\n      <input type=\"range\" id=\"year-slider\" min=\"1961\" max=\"2019\" step=\"1\" value=\"1961\">\n      <button id=\"play-button\">Play</button>\n   </div>\n</template>\n\n\n<script>\nimport { ref, reactive } from 'vue';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nconst selectedFertilizer = ref('nitrogen');\n\nexport default {\n   data() {\n      return {\n         selectedStates: ref([]),\n         currentZoom: 1,\n         name: \"charts\"\n      }\n   },\n   mounted() {\n      const svg = d3.select(this.$refs.chart)\n         .append(\"svg\")\n         .attr('width', '75%')\n         .attr('height', '100%')\n         .style(\"position\", \"fixed\")\n         .style('left', '25%')\n         .style('top', '20%');\n\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n      d3.xml(require(\"@/assets/world.svg\"))\n         .then(data => {\n\n            // Llama a la función después de cargar y agregar el mapa SVG\n            this.getDataFromAPI();\n\n            const importedNode = document.importNode(data.documentElement, true);\n            svg.node().appendChild(importedNode);\n\n            // Obtener todos los elementos \"path\" del SVG\n            const paths = svg.selectAll('path');\n\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n            paths\n               .on('click', this.changeColorOnClick)\n               .on('mouseover', this.changeColorOnHover)\n               .on('mouseout', this.restoreColorOnHover);\n\n            // Agregar zoom al mapa\n            const zoom = d3.zoom()\n               .scaleExtent([1, 8]) // Definir los límites de zoom\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n            // Inicializar el estado del zoom\n            this.currentZoom = 1;\n\n\n         })\n         .catch(error => {\n            console.error(error);\n         });\n      const countries = this.$route.query.countries;\n      if (countries) {\n         const countryList = countries.split(\",\");\n         const selectedCountries = countryList.join(\", \");\n      }\n\n      // Añadir el controlador de eventos al control deslizante\n      const yearSlider = document.getElementById('year-slider');\n      yearSlider.addEventListener('input', (event) => {\n         this.updateMap(event.target.value);\n      });\n   },\n   methods: {\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n      changeColorOnClick(event) {\n         const path = event.target;\n\n         if (path.classList.contains('selectedPath')) {\n            // si ya está seleccionado, se quita el color\n            path.style.fill = 'black';\n            path.classList.remove('selectedPath');\n            // se elimina el país de la lista de países seleccionados\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n         } else {\n            // si no está seleccionado, se agrega el color\n            path.style.fill = 'green';\n            path.classList.add('selectedPath');\n            // se agrega el país a la lista de países seleccionados\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\n            console.log(this.selectedStates);\n         }\n      },\n\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n      changeColorOnHover(event) {\n         const path = event.target;\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'purple';\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n         }\n      },\n\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n      restoreColorOnHover(event) {\n         const path = event.target;\n\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'black';\n         }\n      },\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\n      clearSelection() {\n         // Vaciar el array de países seleccionados\n         this.selectedStates.splice(0);\n\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\n         selectedPaths.forEach(element => {\n            element.classList.remove(\"selectedPath\");\n            element.style.fill = \"black\";\n         });\n      },\n      // Función para hacer zoom\n      zoomIn() {\n         this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n         d3.select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar transición animada al zoom\n            .duration(500) // Duración de la transición\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n      },\n      // Función para hacer zoom out\n      zoomOut() {\n         this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n         d3.select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar una transición suave al zoom\n            .duration(500) // Duración de la transición (en milisegundos)\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n\n      },\n      // Función para hacer zoom con el scroll del ratón y draggear el mapa\n      zoomed(event) {\n         this.currentZoom = event.transform.k;\n         d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n      },\n      navigateToCharts() {\n         const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n         this.$router.push({ name: \"charts\", query: { countries: selectedCountries } });\n      },\n      getDataFromAPI() {\n         const apiUrl = `http://49.12.36.190/api/fertilizers-${selectedFertilizer.value}`;\n\n         axios.get(apiUrl)\n            .then(response => {\n               const data = response.data;\n               this.updateMapValues(data);\n            })\n            .catch(error => {\n               console.error(error);\n            });\n      },\n\n      updateMapValues(data) {\n         const paths = document.querySelectorAll('path');\n         const tooltip = document.createElement('div'); // Crea el elemento div para el tooltip\n         tooltip.style.position = 'absolute';\n         tooltip.style.backgroundColor = 'white';\n         tooltip.style.border = '1px solid gray';\n         tooltip.style.padding = '5px';\n         tooltip.style.pointerEvents = 'none';\n         tooltip.style.display = 'none'; // Oculta el tooltip por defecto\n         document.body.appendChild(tooltip); // Agrega el tooltip al body\n\n         paths.forEach(path => {\n            const code = path.getAttribute('id');\n            const value = data.find(item => item.code === code)?.amount ?? 0;\n            path.setAttribute('amount', value);\n\n            path.addEventListener('mouseover', () => {\n               // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\n               const x = event.clientX;\n               const y = event.clientY;\n               tooltip.style.top = `${y}px`;\n               tooltip.style.left = `${x}px`;\n               tooltip.style.display = 'block'; // Muestra el tooltip\n               tooltip.textContent = `${path.getAttribute('title')}: ${value}`;\n\n            });\n\n            path.addEventListener('mousemove', () => {\n               // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\n               const x = event.clientX;\n               const y = event.clientY;\n               tooltip.style.top = `${y}px`;\n               tooltip.style.left = `${x}px`;\n            });\n\n            path.addEventListener('mouseout', () => {\n               // Oculta el tooltip cuando el mouse sale del elemento \"path\"\n               tooltip.style.display = 'none';\n            });\n         });\n         this.updateMapColors();\n      },\n      createLegend(colorScale, colors) {\n         // Elimina la leyenda anterior si existe\n         const existingLegend = document.getElementById('legend-container');\n         if (existingLegend) {\n            existingLegend.remove();\n         }\n\n         const legendContainer = document.createElement('div');\n         legendContainer.setAttribute('id', 'legend-container');\n         legendContainer.style.display = 'flex';\n         legendContainer.style.flexDirection = 'row';\n         legendContainer.style.alignItems = 'center';\n         legendContainer.style.justifyContent = 'center';\n         legendContainer.style.marginTop = '10px';\n\n         colors.forEach((color, index) => {\n            const colorBox = document.createElement('div');\n            colorBox.style.backgroundColor = color;\n            colorBox.style.width = '20px';\n            colorBox.style.height = '20px';\n            colorBox.style.margin = '0 5px';\n\n            const rangeText = document.createElement('span');\n            rangeText.style.marginLeft = '5px';\n            rangeText.style.marginRight = '10px';\n            const range = colorScale.invertExtent(color);\n            // Caso especial para el primer rango (0.00 - 0.00)\n            if (index === 0) {\n               rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\n            } else {\n               rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n            }\n\n            const legendItem = document.createElement('div');\n            legendItem.style.display = 'flex';\n            legendItem.style.alignItems = 'center';\n            legendItem.appendChild(colorBox);\n            legendItem.appendChild(rangeText);\n\n            legendContainer.appendChild(legendItem);\n         });\n\n         // Agrega la leyenda al final del body\n         document.body.appendChild(legendContainer);\n      },\n      updateMapColors() {\n         const paths = document.querySelectorAll('path');\n         const colors = [\n            '#F5E1F7',\n            '#E6B8E6',\n            '#D7A3D3',\n            '#C68FC6',\n            '#B67AB6',\n            '#A666A3',\n            '#965291',\n            '#854D80',\n            '#73386E',\n            '#62245C'\n\n         ];\n         const amounts = Array.from(paths, path => Number(path.getAttribute('amount')));\n         const maxAmount = Math.max(...amounts);\n         const colorScale = d3.scaleQuantile()\n            .domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\n            .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\n\n         paths.forEach(path => {\n            const amount = Number(path.getAttribute('amount'));\n            const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\n            path.style.fill = color;\n         });\n\n         // Crear leyenda\n         this.createLegend(colorScale, colors);\n      },\n\n      updateFertilizerType(event) {\n         selectedFertilizer.value = event.target.value;\n         this.getDataFromAPI();\n      },\n\n      addLegend() {\n         // Elimina la leyenda anterior si existe\n         const existingLegend = document.getElementById('map-legend');\n         if (existingLegend) {\n            existingLegend.remove();\n         }\n\n         // A continuación, el código existente para agregar la leyenda\n         const legend = L.control({ position: 'bottomright' });\n\n         legend.onAdd = () => {\n            const div = L.DomUtil.create('div', 'info legend');\n            div.id = 'map-legend'; // Agrega un ID para que podamos seleccionarlo y eliminarlo fácilmente\n            const grades = this.legendGrades;\n            const labels = [];\n\n            for (let i = 0; i < grades.length; i++) {\n               labels.push(\n                  '<i style=\"background:' +\n                  this.getColor(grades[i] + 1) +\n                  '\"></i> ' +\n                  grades[i] +\n                  (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+')\n               );\n            }\n\n            div.innerHTML = labels.join('');\n            return div;\n         };\n\n         legend.addTo(this.map);\n      },\n      updateMap(year) {\n         // Aquí es donde puedes actualizar el mapa con los datos correspondientes al año\n         console.log(\"Año seleccionado:\", year);\n         // Llama a las funciones necesarias para actualizar el mapa aquí\n      },\n      playYears() {\n         const startYear = 1961;\n         const endYear = 2019;\n         let currentYear = startYear;\n\n         const interval = setInterval(() => {\n            updateMap(currentYear);\n            yearSlider.value = currentYear;\n            currentYear++;\n\n            if (currentYear > endYear) {\n               clearInterval(interval);\n            }\n         }, 1000); // Cambia cada 1000 milisegundos (1 segundo)\n      }\n\n// const playButton = document.getElementById('play-button');\n//       playButton.addEventListener('click', playYears);\n\n\n\n   }\n};\n\n\n</script>\n\n\n<style scoped>\n.prio {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\nh2,\nh3,\nh4 {\n   color: red;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.map-container {\n   width: 100vw;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n\n.selected {\n   fill: green;\n}\n\npath {\n   fill: black;\n   transition: fill 0.5s ease-in-out;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\n#legend-container {\n   position: absolute;\n   bottom: -50px;\n   left: 50%;\n   transform: translateX(-50%);\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: center;\n   margin-top: 10px;\n}\n\n#year-slider {\n   width: 50%;\n}\n\n/* div[ref=\"chart\"] {\n  margin-bottom: 50px;\n} */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}