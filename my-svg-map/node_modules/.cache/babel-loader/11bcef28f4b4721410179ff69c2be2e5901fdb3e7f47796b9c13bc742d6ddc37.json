{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      hoverValue: '',\n      selectedStates: []\n    };\n  },\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", \"1009.6727\").attr(\"height\", \"665.96301\");\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Llamar a las funciones para hacer los países seleccionables y hoverable\n      this.makeCountriesClickable(svg);\n      this.addHoverEffect(svg);\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  methods: {\n    makeCountriesClickable(svg) {\n      // Agregar evento de escucha de clic a cada país\n      const countries = svg.selectAll(\".country\");\n      countries.on(\"click\", hvalue => {\n        if (hvalue.target.attributes[\"title\"]) {\n          if (hvalue != null && hvalue.target != null) {\n            // Verificar si el valor ya está seleccionado\n            const title = hvalue.target.attributes[\"title\"].value;\n            const id = hvalue.target.attributes[\"id\"].value;\n            const isSelected = this.selectedStates.some(item => item.id === id);\n            if (isSelected) {\n              // Si el valor ya está seleccionado, eliminarlo del array y eliminar la clase\n              this.selectedStates = this.selectedStates.filter(item => item.id !== id);\n              hvalue.target.classList.remove(\"selectedPath\");\n            } else {\n              // Si el valor no está seleccionado, agregarlo al array y agregar la clase\n              this.selectedStates.push({\n                id,\n                title\n              });\n              hvalue.target.classList.add(\"selectedPath\");\n            }\n          }\n        }\n      });\n    },\n    addHoverEffect(svg) {\n      // Agregar evento de escucha de hover a cada país\n      const countries = svg.selectAll(\".country\");\n      countries.on(\"mouseover\", hvalue => {\n        if (hvalue != null && hvalue.target != null) {\n          let title = hvalue.target.attributes[\"title\"];\n          if (title != null) {\n            this.hoverValue = title.value;\n          }\n        }\n      }).on(\"mouseout\", () => {\n        this.hoverValue = '';\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","d3","data","hoverValue","selectedStates","mounted","svg","select","$refs","chart","append","attr","xml","require","then","importedNode","document","importNode","documentElement","node","appendChild","makeCountriesClickable","addHoverEffect","catch","error","console","methods","countries","selectAll","on","hvalue","target","attributes","title","value","id","isSelected","some","item","filter","classList","remove","push","add"],"sources":["/home/lasmas/GitHub/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n\n   <div>\n      <h2> Selected Countries :</h2>\n      <div style=\"display:inline\">\n         <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n            {{ state.title }} </h4>\n      </div>\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: black\"> {{ hoverValue }} </h3>\n      </div>\n   </div>\n   <div ref=\"chart\">\n\n   \n      \n      <!-- intentar que los path sean devuelto por la API -->\n      <svg\n        :style=\"{ transform: `scale(${zoomLevel})` }\" @mouseover=\"changeHoverValue\" @click=\"setSelectedPath\"\n        >\n         \n      </svg>\n\n\n   </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\nexport default {\n   data() {\n      return {\n         hoverValue: '',\n         selectedStates: []\n      }\n   },\n   mounted() {\n     const svg = d3.select(this.$refs.chart)\n       .append(\"svg\")\n       .attr(\"width\", \"1009.6727\")\n       .attr(\"height\", \"665.96301\");\n     // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n     d3.xml(require(\"@/assets/world.svg\"))\n       .then(data => {\n         const importedNode = document.importNode(data.documentElement, true);\n         svg.node().appendChild(importedNode);\n\n         // Llamar a las funciones para hacer los países seleccionables y hoverable\n         this.makeCountriesClickable(svg);\n         this.addHoverEffect(svg);\n       })\n       .catch(error => {\n         console.error(error);\n       });\n   },\n   methods: {\n      makeCountriesClickable(svg) {\n         // Agregar evento de escucha de clic a cada país\n         const countries = svg.selectAll(\".country\");\n         countries.on(\"click\", hvalue => {\n            if (hvalue.target.attributes[\"title\"]) {\n               if (hvalue != null && hvalue.target != null) {\n                  // Verificar si el valor ya está seleccionado\n                  const title = hvalue.target.attributes[\"title\"].value;\n                  const id = hvalue.target.attributes[\"id\"].value;\n                  const isSelected = this.selectedStates.some(item => item.id === id);\n\n                  if (isSelected) {\n                     // Si el valor ya está seleccionado, eliminarlo del array y eliminar la clase\n                     this.selectedStates = this.selectedStates.filter(item => item.id !== id);\n                     hvalue.target.classList.remove(\"selectedPath\");\n                  } else {\n                     // Si el valor no está seleccionado, agregarlo al array y agregar la clase\n                     this.selectedStates.push({ id, title });\n                     hvalue.target.classList.add(\"selectedPath\");\n                  }\n               }\n            }\n         });\n      },\n      addHoverEffect(svg) {\n         // Agregar evento de escucha de hover a cada país\n         const countries = svg.selectAll(\".country\");\n         countries.on(\"mouseover\", hvalue => {\n            if (hvalue != null && hvalue.target != null) {\n               let title = hvalue.target.attributes[\"title\"];\n               if (title != null) {\n                  this.hoverValue = title.value;\n               }\n            }\n         }).on(\"mouseout\", () => {\n            this.hoverValue = '';\n         });\n      }\n   }\n};\n</script>\n\n<style scoped>\n@keyframes slowchange {\n   to {\n      fill: indianred;\n   }\n}\n\n@keyframes hoverChange {\n   to {\n      fill: purple;\n   }\n}\n\npath {\n   fill: black;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.logo {\n   height: 6em;\n   padding: 1.5em;\n   will-change: filter;\n}\n\n.logo:hover {\n   filter: drop-shadow(0 0 2em #646cffaa);\n}\n\n.logo.vue:hover {\n   filter: drop-shadow(0 0 2em #42b883aa);\n}\n\n.map-container {\n   width: 100vw;\n   /* ancho al 100% de la ventana */\n   /* height: 100vh; altura al 100% de la ventana */\n   display: flex;\n   justify-content: center;\n   /* centro horizontal */\n   align-items: center;\n   /* centro vertical */\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}