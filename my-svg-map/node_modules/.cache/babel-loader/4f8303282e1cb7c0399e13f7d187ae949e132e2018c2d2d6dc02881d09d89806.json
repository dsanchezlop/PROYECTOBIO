{"ast":null,"code":"import { ref, reactive } from \"vue\";\nimport * as d3 from \"d3\";\nimport axios from \"axios\";\nconst selectedFertilizer = ref(\"nitrogen\");\nexport default {\n  data() {\n    return {\n      selectedStates: ref([]),\n      currentZoom: 1,\n      name: \"charts\",\n      selectedYear: 1961\n    };\n  },\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", \"75%\").attr(\"height\", \"100%\").style(\"position\", \"fixed\").style(\"left\", \"25%\").style(\"top\", \"20%\");\n\n    // World svg loading and drawn\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      //Calls to the function after loading and drawing the svg map\n      this.getDataFromAPI();\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      //Gets all SVG \"path\" elements\n      const paths = svg.selectAll(\"path\");\n\n      // Assing the functions \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" to the corresponding events of each \"path\" element\n      paths.on(\"click\", this.changeColorOnClick).on(\"mouseover\", this.changeColorOnHover).on(\"mouseout\", this.restoreColorOnHover);\n\n      // Adds zoom to the map\n      const zoom = d3.zoom().scaleExtent([1, 8]) // Defined zoom limits\n      .on(\"zoom\", this.zoomed); // Calls to the zoom function each time it's used\n\n      svg.call(zoom); // Calls to the zoom function in the SVG element\n\n      // Initialize zoom\n      this.currentZoom = 1;\n    }).catch(error => {\n      console.error(error);\n    });\n    const countries = this.$route.query.countries;\n    if (countries) {\n      const countryList = countries.split(\",\");\n      const selectedCountries = countryList.join(\", \");\n    }\n\n    //Add the event controller to the slider controller\n    const yearSlider = document.getElementById(\"year-slider\");\n    yearSlider.addEventListener(\"input\", event => {\n      this.updateMap(event.target.value);\n    });\n  },\n  methods: {\n    //Function to change the background color of a \"path\" element FunciÃ³n para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en Ã©l\n    changeColorOnClick(event) {\n      const path = event.target;\n      if (path.classList.contains(\"selectedPath\")) {\n        // If selected, the color resets\n        // path.style.fill = 'black';\n        this.updateMapColors();\n        path.classList.remove(\"selectedPath\");\n        // Removes the country from the selected list\n        this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n      } else {\n        // If not selected, changes color\n        path.style.fill = \"green\";\n        path.classList.add(\"selectedPath\");\n        // Adds country to the selected country list\n        this.selectedStates.push({\n          id: path.id,\n          title: path.getAttribute(\"title\")\n        });\n        //   console.log(this.selectedStates);\n      }\n    },\n\n    // Function to change the background color of a \"path\" element to blue on hover\n    changeColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains(\"selectedPath\")) {\n        path.style.fill = \"blue\";\n        document.getElementById(\"hover-value2\").textContent = path.getAttribute(\"title\");\n      } else {\n        path.style.fill = \"green\";\n      }\n    },\n    // Function to restore the background color of a \"path\" element when you stop hovering the mouse over it\n    restoreColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains(\"selectedPath\")) {\n        // path.style.fill = 'black';\n        this.updateMapColors();\n      }\n    },\n    // Function to empty the array and remove the color of the selected countries\n    clearSelection() {\n      // Empty the array of selected countries\n      this.selectedStates.splice(0);\n\n      // Deselect all DOM elements that have class \"selectedPath\"\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\n      selectedPaths.forEach(element => {\n        element.classList.remove(\"selectedPath\");\n        // element.style.fill = \"black\";\n        this.updateMapColors();\n      });\n    },\n    // Zoom function used by the button\n    zoomIn() {\n      this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Increase the current zoom factor and make sure it doesn't exceed the maximum limit\n      d3.select(\"svg\") // Select the SVG element\n      .transition() // Add animated transition to zoom\n      .duration(500) // Duration of the transition (in miliseconds)\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Apply zoom transform\n    },\n\n    // Zoom function used by the button\n    zoomOut() {\n      this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrease the current zoom factor and make sure it doesn't exceed the maximum limit\n      d3.select(\"svg\") // Select the SVG element\n      .transition() // Add animated transition to zoom\n      .duration(500) // Duration of the transition (in miliseconds)\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Apply zoom transform\n    },\n\n    // Function to zoom with the mouse scroll and drag the map\n    zoomed(event) {\n      this.currentZoom = event.transform.k;\n      d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformaciÃ³n al elemento SVG actual\n    },\n\n    navigateToCharts() {\n      const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n      this.$router.push({\n        name: \"charts\",\n        query: {\n          countries: selectedCountries\n        }\n      });\n    },\n    getDataFromAPI() {\n      const apiUrl = `http://49.12.36.190/api/fertilizers-${selectedFertilizer.value}-year?year=${this.selectedYear}`;\n      axios.get(apiUrl).then(response => {\n        const data = response.data;\n        this.updateMapValues(data);\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    updateMapValues(data) {\n      const paths = document.querySelectorAll(\"path\");\n      const tooltip = document.createElement(\"div\"); // Creates the div element for the tooltip\n      tooltip.style.position = \"absolute\";\n      tooltip.style.backgroundColor = \"white\";\n      tooltip.style.border = \"1px solid gray\";\n      tooltip.style.padding = \"5px\";\n      tooltip.style.pointerEvents = \"none\";\n      tooltip.style.display = \"none\"; // Hides the tooltip by default\n      document.body.appendChild(tooltip); // Adds the tooltip to the body\n\n      paths.forEach(path => {\n        const code = path.getAttribute(\"id\");\n        const value = data.find(item => item.code === code)?.amount ?? 0;\n        path.setAttribute(\"amount\", value);\n        path.addEventListener(\"mouseover\", () => {\n          // Gets the mouse position and updates the tooltip\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n          tooltip.style.display = \"block\"; // Shows the tooltip\n          tooltip.textContent = `${path.getAttribute(\"title\")}: ${value}`;\n        });\n        path.addEventListener(\"mousemove\", () => {\n          // Updates the tooltip while the mouse moves inside the \"path\"\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n        });\n        path.addEventListener(\"mouseout\", () => {\n          // Hide the tooltip when the mouse leaves the \"path\" element\n          tooltip.style.display = \"none\";\n        });\n      });\n      this.updateMapColors();\n    },\n    createLegend(colorScale, colors) {\n      // Delete the previous legend if it exists\n      const existingLegend = document.getElementById(\"legend-container\");\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n      const legendContainer = document.createElement(\"div\");\n      legendContainer.setAttribute(\"id\", \"legend-container\");\n      legendContainer.style.display = \"flex\";\n      legendContainer.style.flexDirection = \"row\";\n      legendContainer.style.alignItems = \"center\";\n      legendContainer.style.justifyContent = \"center\";\n      legendContainer.style.marginTop = \"10px\";\n      colors.forEach((color, index) => {\n        const colorBox = document.createElement(\"div\");\n        colorBox.style.backgroundColor = color;\n        colorBox.style.width = \"20px\";\n        colorBox.style.height = \"20px\";\n        colorBox.style.margin = \"0 5px\";\n        const rangeText = document.createElement(\"span\");\n        rangeText.style.marginLeft = \"5px\";\n        rangeText.style.marginRight = \"10px\";\n        const range = colorScale.invertExtent(color);\n        // Special case for the first range (0.00 - 0.00)\n        if (index === 0) {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\n        } else {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n        }\n        const legendItem = document.createElement(\"div\");\n        legendItem.style.display = \"flex\";\n        legendItem.style.alignItems = \"center\";\n        legendItem.appendChild(colorBox);\n        legendItem.appendChild(rangeText);\n        legendContainer.appendChild(legendItem);\n      });\n\n      // Adds legend at the end of the body\n      document.body.appendChild(legendContainer);\n    },\n    updateMapColors() {\n      const paths = document.querySelectorAll(\"path\");\n      const colors = [\"#F5E1F7\", \"#E6B8E6\", \"#D7A3D3\", \"#C68FC6\", \"#B67AB6\", \"#A666A3\", \"#965291\", \"#854D80\", \"#73386E\", \"#62245C\"];\n      const amounts = Array.from(paths, path => Number(path.getAttribute(\"amount\")));\n      const maxAmount = Math.max(...amounts);\n      const colorScale = d3.scaleQuantile().domain(amounts.filter(amount => amount > 0)) // Excludes the value 0.00 from the scale\n      .range(colors.slice(1)); // Excludes the first color in the range, as it will be handled separately\n\n      paths.forEach(path => {\n        const amount = Number(path.getAttribute(\"amount\"));\n        const color = amount === 0 ? colors[0] : colorScale(amount); // Use the first color of the array for the range 0.00 - 0.00\n        path.style.fill = color;\n      });\n\n      // Creates the legend\n      this.createLegend(colorScale, colors);\n    },\n    updateFertilizerType(event) {\n      selectedFertilizer.value = event.target.value;\n      this.getDataFromAPI();\n    },\n    addLegend() {\n      // Delete the previous legend if it exists\n      const existingLegend = document.getElementById(\"map-legend\");\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n\n      // Below is the existing code to add the legend\n      const legend = L.control({\n        position: \"bottomright\"\n      });\n      legend.onAdd = () => {\n        const div = L.DomUtil.create(\"div\", \"info legend\");\n        div.id = \"map-legend\"; // Add an ID so we can easily select and remove it\n        const grades = this.legendGrades;\n        const labels = [];\n        for (let i = 0; i < grades.length; i++) {\n          labels.push('<i style=\"background:' + this.getColor(grades[i] + 1) + '\"></i> ' + grades[i] + (grades[i + 1] ? \"&ndash;\" + grades[i + 1] + \"<br>\" : \"+\"));\n        }\n        div.innerHTML = labels.join(\"\");\n        return div;\n      };\n      legend.addTo(this.map);\n    },\n    updateMap(year) {\n      // AquÃ­ es donde puedes actualizar el mapa con los datos correspondientes al aÃ±o\n      console.log(\"AÃ±o seleccionado:\", year);\n      // Llama a las funciones necesarias para actualizar el mapa aquÃ­\n    },\n\n    playYears() {\n      const startYear = 1961;\n      const endYear = 2019;\n      let currentYear = startYear;\n      const interval = setInterval(() => {\n        updateMap(currentYear);\n        yearSlider.value = currentYear;\n        currentYear++;\n        if (currentYear > endYear) {\n          clearInterval(interval);\n        }\n      }, 1000); // Change every 1000 milliseconds (1 second)\n    },\n\n    updateMap() {\n      this.getDataFromAPI();\n    }\n  }\n};","map":{"version":3,"names":["ref","reactive","d3","axios","selectedFertilizer","data","selectedStates","currentZoom","name","selectedYear","mounted","svg","select","$refs","chart","append","attr","style","xml","require","then","getDataFromAPI","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","changeColorOnClick","changeColorOnHover","restoreColorOnHover","zoom","scaleExtent","zoomed","call","catch","error","console","countries","$route","query","countryList","split","selectedCountries","join","yearSlider","getElementById","addEventListener","event","updateMap","target","value","methods","path","classList","contains","updateMapColors","remove","filter","state","id","fill","add","push","title","getAttribute","textContent","clearSelection","splice","selectedPaths","querySelectorAll","forEach","element","zoomIn","Math","min","transition","duration","zoomOut","max","transform","k","navigateToCharts","map","$router","apiUrl","get","response","updateMapValues","tooltip","createElement","position","backgroundColor","border","padding","pointerEvents","display","body","code","find","item","amount","setAttribute","x","clientX","y","clientY","top","left","createLegend","colorScale","colors","existingLegend","legendContainer","flexDirection","alignItems","justifyContent","marginTop","color","index","colorBox","width","height","margin","rangeText","marginLeft","marginRight","range","invertExtent","toFixed","legendItem","amounts","Array","from","Number","maxAmount","scaleQuantile","domain","slice","updateFertilizerType","addLegend","legend","L","control","onAdd","div","DomUtil","create","grades","legendGrades","labels","i","length","getColor","innerHTML","addTo","year","log","playYears","startYear","endYear","currentYear","interval","setInterval","clearInterval"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\SVGMap.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"prio2\"\r\n    style=\"display: flex; justify-content: center; margin-top: 10px\"\r\n  >\r\n    <h3>Select year</h3>\r\n    <input\r\n      type=\"range\"\r\n      min=\"1961\"\r\n      max=\"2019\"\r\n      step=\"1\"\r\n      id=\"year-slider\"\r\n      v-model=\"selectedYear\"\r\n      @change=\"updateMap\"\r\n    />\r\n    <span>{{ selectedYear }}</span>\r\n  </div>\r\n  <h3>Select fertilizer</h3>\r\n  <select class=\"prio\" @change=\"updateFertilizerType\">\r\n    <option value=\"nitrogen\">Nitrogen Derived</option>\r\n    <option value=\"phosphorous\">Phosphorous Derived</option>\r\n    <option value=\"potassium\">Potassium Derived</option>\r\n  </select>\r\n  <br />\r\n  <br />\r\n  <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\r\n  <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\r\n  <br />\r\n  <br />\r\n  <button class=\"button-container\" @click=\"clearSelection\">\r\n    Clear Selection\r\n  </button>\r\n  <br />\r\n  <button\r\n    v-if=\"selectedStates.length > 1\"\r\n    class=\"button-container\"\r\n    @click=\"navigateToCharts\"\r\n  >\r\n    Go to charts\r\n  </button>\r\n\r\n  <div class=\"prio\">\r\n    <div style=\"display: flex; text-align: center; align-items: center\">\r\n      <h3>Hovered Country:</h3>\r\n      <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\r\n    </div>\r\n    <h2>Selected Countries:</h2>\r\n    <div style=\"display: inline\">\r\n      <!-- up to down -->\r\n      <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\r\n        {{ state.id }}: {{ state.title }}\r\n      </h4>\r\n\r\n      <!-- right to left -->\r\n      <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\r\n           {{ state.title }} </h4> -->\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    ref=\"chart\"\r\n    style=\"\r\n      position: relative;\r\n      width: 75%;\r\n      height: 80%;\r\n      margin-left: 25%;\r\n      margin-top: 33%;\r\n    \"\r\n  ></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive } from \"vue\";\r\nimport * as d3 from \"d3\";\r\nimport axios from \"axios\";\r\n\r\nconst selectedFertilizer = ref(\"nitrogen\");\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedStates: ref([]),\r\n      currentZoom: 1,\r\n      name: \"charts\",\r\n      selectedYear: 1961,\r\n    };\r\n  },\r\n  mounted() {\r\n    const svg = d3\r\n      .select(this.$refs.chart)\r\n      .append(\"svg\")\r\n      .attr(\"width\", \"75%\")\r\n      .attr(\"height\", \"100%\")\r\n      .style(\"position\", \"fixed\")\r\n      .style(\"left\", \"25%\")\r\n      .style(\"top\", \"20%\");\r\n\r\n    // World svg loading and drawn\r\n    d3.xml(require(\"@/assets/world.svg\"))\r\n      .then((data) => {\r\n        //Calls to the function after loading and drawing the svg map\r\n        this.getDataFromAPI();\r\n\r\n        const importedNode = document.importNode(data.documentElement, true);\r\n        svg.node().appendChild(importedNode);\r\n\r\n        //Gets all SVG \"path\" elements\r\n        const paths = svg.selectAll(\"path\");\r\n\r\n        // Assing the functions \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" to the corresponding events of each \"path\" element\r\n        paths\r\n          .on(\"click\", this.changeColorOnClick)\r\n          .on(\"mouseover\", this.changeColorOnHover)\r\n          .on(\"mouseout\", this.restoreColorOnHover);\r\n\r\n        // Adds zoom to the map\r\n        const zoom = d3\r\n          .zoom()\r\n          .scaleExtent([1, 8]) // Defined zoom limits\r\n          .on(\"zoom\", this.zoomed); // Calls to the zoom function each time it's used\r\n\r\n        svg.call(zoom); // Calls to the zoom function in the SVG element\r\n\r\n        // Initialize zoom\r\n        this.currentZoom = 1;\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    const countries = this.$route.query.countries;\r\n    if (countries) {\r\n      const countryList = countries.split(\",\");\r\n      const selectedCountries = countryList.join(\", \");\r\n    }\r\n\r\n    //Add the event controller to the slider controller\r\n    const yearSlider = document.getElementById(\"year-slider\");\r\n    yearSlider.addEventListener(\"input\", (event) => {\r\n      this.updateMap(event.target.value);\r\n    });\r\n  },\r\n  methods: {\r\n    //Function to change the background color of a \"path\" element FunciÃ³n para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en Ã©l\r\n    changeColorOnClick(event) {\r\n      const path = event.target;\r\n\r\n      if (path.classList.contains(\"selectedPath\")) {\r\n        // If selected, the color resets\r\n        // path.style.fill = 'black';\r\n        this.updateMapColors();\r\n        path.classList.remove(\"selectedPath\");\r\n        // Removes the country from the selected list\r\n        this.selectedStates = this.selectedStates.filter(\r\n          (state) => state.id !== path.id\r\n        );\r\n      } else {\r\n        // If not selected, changes color\r\n        path.style.fill = \"green\";\r\n        path.classList.add(\"selectedPath\");\r\n        // Adds country to the selected country list\r\n        this.selectedStates.push({\r\n          id: path.id,\r\n          title: path.getAttribute(\"title\"),\r\n        });\r\n      //   console.log(this.selectedStates);\r\n      }\r\n    },\r\n\r\n    // Function to change the background color of a \"path\" element to blue on hover\r\n    changeColorOnHover(event) {\r\n      const path = event.target;\r\n      if (!path.classList.contains(\"selectedPath\")) {\r\n        path.style.fill = \"blue\";\r\n        document.getElementById(\"hover-value2\").textContent =\r\n          path.getAttribute(\"title\");\r\n      } else {\r\n        path.style.fill = \"green\";\r\n      }\r\n    },\r\n\r\n    // Function to restore the background color of a \"path\" element when you stop hovering the mouse over it\r\n    restoreColorOnHover(event) {\r\n      const path = event.target;\r\n\r\n      if (!path.classList.contains(\"selectedPath\")) {\r\n        // path.style.fill = 'black';\r\n        this.updateMapColors();\r\n      }\r\n    },\r\n    // Function to empty the array and remove the color of the selected countries\r\n    clearSelection() {\r\n      // Empty the array of selected countries\r\n      this.selectedStates.splice(0);\r\n\r\n      // Deselect all DOM elements that have class \"selectedPath\"\r\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\r\n      selectedPaths.forEach((element) => {\r\n        element.classList.remove(\"selectedPath\");\r\n        // element.style.fill = \"black\";\r\n        this.updateMapColors();\r\n      });\r\n    },\r\n\r\n    // Zoom function used by the button\r\n    zoomIn() {\r\n      this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Increase the current zoom factor and make sure it doesn't exceed the maximum limit\r\n      d3.select(\"svg\") // Select the SVG element\r\n        .transition() // Add animated transition to zoom\r\n        .duration(500) // Duration of the transition (in miliseconds)\r\n        .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Apply zoom transform\r\n    },\r\n    // Zoom function used by the button\r\n    zoomOut() {\r\n      this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrease the current zoom factor and make sure it doesn't exceed the maximum limit\r\n      d3.select(\"svg\") // Select the SVG element\r\n        .transition() // Add animated transition to zoom\r\n        .duration(500) // Duration of the transition (in miliseconds)\r\n        .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Apply zoom transform\r\n    },\r\n    // Function to zoom with the mouse scroll and drag the map\r\n    zoomed(event) {\r\n      this.currentZoom = event.transform.k;\r\n      d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformaciÃ³n al elemento SVG actual\r\n    },\r\n    navigateToCharts() {\r\n      const selectedCountries = this.selectedStates\r\n        .map((state) => state.title)\r\n        .join(\",\");\r\n      this.$router.push({\r\n        name: \"charts\",\r\n        query: { countries: selectedCountries },\r\n      });\r\n    },\r\n    getDataFromAPI() {\r\n      const apiUrl = `http://49.12.36.190/api/fertilizers-${selectedFertilizer.value}-year?year=${this.selectedYear}`;\r\n\r\n      axios\r\n        .get(apiUrl)\r\n        .then((response) => {\r\n          const data = response.data;\r\n          this.updateMapValues(data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n\r\n    updateMapValues(data) {\r\n      const paths = document.querySelectorAll(\"path\");\r\n      const tooltip = document.createElement(\"div\"); // Creates the div element for the tooltip\r\n      tooltip.style.position = \"absolute\";\r\n      tooltip.style.backgroundColor = \"white\";\r\n      tooltip.style.border = \"1px solid gray\";\r\n      tooltip.style.padding = \"5px\";\r\n      tooltip.style.pointerEvents = \"none\";\r\n      tooltip.style.display = \"none\"; // Hides the tooltip by default\r\n      document.body.appendChild(tooltip); // Adds the tooltip to the body\r\n\r\n      paths.forEach((path) => {\r\n        const code = path.getAttribute(\"id\");\r\n        const value = data.find((item) => item.code === code)?.amount ?? 0;\r\n        path.setAttribute(\"amount\", value);\r\n\r\n        path.addEventListener(\"mouseover\", () => {\r\n          // Gets the mouse position and updates the tooltip\r\n          const x = event.clientX;\r\n          const y = event.clientY;\r\n          tooltip.style.top = `${y}px`;\r\n          tooltip.style.left = `${x}px`;\r\n          tooltip.style.display = \"block\"; // Shows the tooltip\r\n          tooltip.textContent = `${path.getAttribute(\"title\")}: ${value}`;\r\n        });\r\n\r\n        path.addEventListener(\"mousemove\", () => {\r\n          // Updates the tooltip while the mouse moves inside the \"path\"\r\n          const x = event.clientX;\r\n          const y = event.clientY;\r\n          tooltip.style.top = `${y}px`;\r\n          tooltip.style.left = `${x}px`;\r\n        });\r\n\r\n        path.addEventListener(\"mouseout\", () => {\r\n          // Hide the tooltip when the mouse leaves the \"path\" element\r\n          tooltip.style.display = \"none\";\r\n        });\r\n      });\r\n      this.updateMapColors();\r\n    },\r\n    createLegend(colorScale, colors) {\r\n      // Delete the previous legend if it exists\r\n      const existingLegend = document.getElementById(\"legend-container\");\r\n      if (existingLegend) {\r\n        existingLegend.remove();\r\n      }\r\n\r\n      const legendContainer = document.createElement(\"div\");\r\n      legendContainer.setAttribute(\"id\", \"legend-container\");\r\n      legendContainer.style.display = \"flex\";\r\n      legendContainer.style.flexDirection = \"row\";\r\n      legendContainer.style.alignItems = \"center\";\r\n      legendContainer.style.justifyContent = \"center\";\r\n      legendContainer.style.marginTop = \"10px\";\r\n\r\n      colors.forEach((color, index) => {\r\n        const colorBox = document.createElement(\"div\");\r\n        colorBox.style.backgroundColor = color;\r\n        colorBox.style.width = \"20px\";\r\n        colorBox.style.height = \"20px\";\r\n        colorBox.style.margin = \"0 5px\";\r\n\r\n        const rangeText = document.createElement(\"span\");\r\n        rangeText.style.marginLeft = \"5px\";\r\n        rangeText.style.marginRight = \"10px\";\r\n        const range = colorScale.invertExtent(color);\r\n        // Special case for the first range (0.00 - 0.00)\r\n        if (index === 0) {\r\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(\r\n            2\r\n          )}`;\r\n        } else {\r\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(\r\n            2\r\n          )}`;\r\n        }\r\n\r\n        const legendItem = document.createElement(\"div\");\r\n        legendItem.style.display = \"flex\";\r\n        legendItem.style.alignItems = \"center\";\r\n        legendItem.appendChild(colorBox);\r\n        legendItem.appendChild(rangeText);\r\n\r\n        legendContainer.appendChild(legendItem);\r\n      });\r\n\r\n      // Adds legend at the end of the body\r\n      document.body.appendChild(legendContainer);\r\n    },\r\n    updateMapColors() {\r\n      const paths = document.querySelectorAll(\"path\");\r\n      const colors = [\r\n        \"#F5E1F7\",\r\n        \"#E6B8E6\",\r\n        \"#D7A3D3\",\r\n        \"#C68FC6\",\r\n        \"#B67AB6\",\r\n        \"#A666A3\",\r\n        \"#965291\",\r\n        \"#854D80\",\r\n        \"#73386E\",\r\n        \"#62245C\",\r\n      ];\r\n      const amounts = Array.from(paths, (path) =>\r\n        Number(path.getAttribute(\"amount\"))\r\n      );\r\n      const maxAmount = Math.max(...amounts);\r\n      const colorScale = d3\r\n        .scaleQuantile()\r\n        .domain(amounts.filter((amount) => amount > 0)) // Excludes the value 0.00 from the scale\r\n        .range(colors.slice(1)); // Excludes the first color in the range, as it will be handled separately\r\n\r\n      paths.forEach((path) => {\r\n        const amount = Number(path.getAttribute(\"amount\"));\r\n        const color = amount === 0 ? colors[0] : colorScale(amount); // Use the first color of the array for the range 0.00 - 0.00\r\n        path.style.fill = color;\r\n      });\r\n\r\n      // Creates the legend\r\n      this.createLegend(colorScale, colors);\r\n    },\r\n\r\n    updateFertilizerType(event) {\r\n      selectedFertilizer.value = event.target.value;\r\n      this.getDataFromAPI();\r\n    },\r\n\r\n    addLegend() {\r\n      // Delete the previous legend if it exists\r\n      const existingLegend = document.getElementById(\"map-legend\");\r\n      if (existingLegend) {\r\n        existingLegend.remove();\r\n      }\r\n\r\n      // Below is the existing code to add the legend\r\n      const legend = L.control({ position: \"bottomright\" });\r\n\r\n      legend.onAdd = () => {\r\n        const div = L.DomUtil.create(\"div\", \"info legend\");\r\n        div.id = \"map-legend\"; // Add an ID so we can easily select and remove it\r\n        const grades = this.legendGrades;\r\n        const labels = [];\r\n\r\n        for (let i = 0; i < grades.length; i++) {\r\n          labels.push(\r\n            '<i style=\"background:' +\r\n              this.getColor(grades[i] + 1) +\r\n              '\"></i> ' +\r\n              grades[i] +\r\n              (grades[i + 1] ? \"&ndash;\" + grades[i + 1] + \"<br>\" : \"+\")\r\n          );\r\n        }\r\n\r\n        div.innerHTML = labels.join(\"\");\r\n        return div;\r\n      };\r\n\r\n      legend.addTo(this.map);\r\n    },\r\n    updateMap(year) {\r\n      // AquÃ­ es donde puedes actualizar el mapa con los datos correspondientes al aÃ±o\r\n      console.log(\"AÃ±o seleccionado:\", year);\r\n      // Llama a las funciones necesarias para actualizar el mapa aquÃ­\r\n    },\r\n    playYears() {\r\n      const startYear = 1961;\r\n      const endYear = 2019;\r\n      let currentYear = startYear;\r\n\r\n      const interval = setInterval(() => {\r\n        updateMap(currentYear);\r\n        yearSlider.value = currentYear;\r\n        currentYear++;\r\n\r\n        if (currentYear > endYear) {\r\n          clearInterval(interval);\r\n        }\r\n      }, 1000); // Change every 1000 milliseconds (1 second)\r\n    },\r\n    updateMap() {\r\n      this.getDataFromAPI();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nbutton {\r\n  background-color: #604caf;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #3b285f;\r\n}\r\n\r\n.prio {\r\n  position: relative;\r\n  z-index: 1;\r\n  margin-right: auto;\r\n  width: fit-content;\r\n  height: fit-content;\r\n}\r\n\r\n.prio2 {\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\nh2,\r\nh3,\r\nh4 {\r\n  color: red;\r\n}\r\n\r\n.selectedPath {\r\n  animation-name: slowchange;\r\n  animation-duration: 1.5s;\r\n  animation-fill-mode: forwards;\r\n  transition: fill 0.5s ease-in-out;\r\n}\r\n\r\npath:hover {\r\n  animation-name: hoverChange;\r\n  animation-duration: 1s;\r\n  animation-fill-mode: forwards;\r\n}\r\n\r\n.map-container {\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.button-container {\r\n  position: relative;\r\n  z-index: 1;\r\n  margin-right: auto;\r\n  width: fit-content;\r\n  height: fit-content;\r\n}\r\n\r\n.button-zoom {\r\n  position: relative;\r\n  z-index: 1;\r\n  margin: auto;\r\n  width: 2%;\r\n  height: 2%;\r\n}\r\n\r\n.draggeable {\r\n  cursor: move;\r\n}\r\n\r\n.selected {\r\n  fill: green;\r\n}\r\n\r\npath:hover {\r\n  animation-name: hoverChange;\r\n  animation-duration: 1s;\r\n  animation-fill-mode: forwards;\r\n  transition: fill 0.5s ease-in-out;\r\n}\r\n\r\n#legend-container {\r\n  position: absolute;\r\n  bottom: -50px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n#year-slider {\r\n  width: 50%;\r\n}\r\n\r\n/* div[ref=\"chart\"] {\r\n  margin-bottom: 50px;\r\n} */\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}