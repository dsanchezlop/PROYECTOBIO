{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-46f53af0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"prio\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\",\n    \"text-align\": \"center\",\n    \"align-items\": \"center\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Hovered Country:\"), /*#__PURE__*/_createElementVNode(\"h3\", {\n  style: {\n    \"color\": \"red\"\n  },\n  id: \"hover-value2\"\n}, \"Move your mouse\")], -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Selected Countries:\", -1 /* HOISTED */));\nconst _hoisted_6 = {\n  style: {\n    \"display\": \"inline\"\n  }\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"nitrogen\"\n}, \"Nitrogen Derived\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"phosphorous\"\n}, \"Phosphorous Derived\", -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"potassium\"\n}, \"Potassium Derived\", -1 /* HOISTED */));\nconst _hoisted_10 = [_hoisted_7, _hoisted_8, _hoisted_9];\nconst _hoisted_11 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.zoomIn && $options.zoomIn(...args))\n  }, \"+\"), _createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.zoomOut && $options.zoomOut(...args))\n  }, \"-\"), _hoisted_1, _createElementVNode(\"button\", {\n    class: \"button-container\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.clearSelection && $options.clearSelection(...args))\n  }, \" Clear Selection \"), _hoisted_2, $data.selectedStates.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"button-container\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.navigateToCharts && $options.navigateToCharts(...args))\n  }, \"Go to charts\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" up to down \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedStates, state => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: state.id\n    }, _toDisplayString(state.id) + \": \" + _toDisplayString(state.title), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" right to left \"), _createCommentVNode(\" <h4 style=\\\"display:inline; margin:10px;\\\" v-for=\\\"state in selectedStates\\\" :key=\\\"state.id\\\"> {{ state.id }} :\\n           {{ state.title }} </h4> \")])]), _createElementVNode(\"select\", {\n    onChange: _cache[4] || (_cache[4] = (...args) => _ctx.updateFertilizerType && _ctx.updateFertilizerType(...args))\n  }, _hoisted_10, 32 /* HYDRATE_EVENTS */), _createElementVNode(\"div\", _hoisted_11, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","style","id","value","_hoisted_7","_hoisted_8","_hoisted_9","ref","onClick","_cache","args","$options","zoomIn","zoomOut","_hoisted_1","clearSelection","_hoisted_2","$data","selectedStates","length","_createElementBlock","navigateToCharts","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_createCommentVNode","_Fragment","_renderList","state","key","_toDisplayString","title","onChange","_ctx","updateFertilizerType","_hoisted_11"],"sources":["/home/albertcasany/public_html/FERTFLORAIMPACT/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n   <br>\n   <button v-if=\"selectedStates.length > 1\" class=\"button-container\" @click=\"navigateToCharts\">Go to charts</button>\n\n   <div class=\"prio\">\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\n      </div>\n      <h2>Selected Countries:</h2>\n      <div style=\"display:inline\">\n         <!-- up to down -->\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\n            {{ state.id }}: {{ state.title }}\n         </h4>\n\n         <!-- right to left -->\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n           {{ state.title }} </h4> -->\n      </div>\n\n   </div>\n   <select @change=\"updateFertilizerType\">\n      <option value=\"nitrogen\">Nitrogen Derived</option>\n      <option value=\"phosphorous\">Phosphorous Derived</option>\n      <option value=\"potassium\">Potassium Derived</option>\n   </select>\n   <div ref=\"chart\">\n   </div>\n</template>\n\n\n<script>\nimport { ref, reactive } from 'vue';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nconst selectedFertilizer = ref('nitrogen');\n\nexport default {\n   data() {\n      return {\n         selectedStates: ref([]),\n         currentZoom: 1,\n         name: \"charts\"\n      }\n   },\n   mounted() {\n      const svg = d3.select(this.$refs.chart)\n         .append(\"svg\")\n         .attr('width', '75%')\n         .attr('height', '100%')\n         .style(\"position\", \"fixed\")\n         .style('left', '25%')\n         .style('top', '20%');\n\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n      d3.xml(require(\"@/assets/world.svg\"))\n         .then(data => {\n\n            // Llama a la función después de cargar y agregar el mapa SVG\n            this.getDataFromAPI();\n\n            const importedNode = document.importNode(data.documentElement, true);\n            svg.node().appendChild(importedNode);\n\n            // Obtener todos los elementos \"path\" del SVG\n            const paths = svg.selectAll('path');\n\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n            paths\n               .on('click', this.changeColorOnClick)\n               .on('mouseover', this.changeColorOnHover)\n               .on('mouseout', this.restoreColorOnHover);\n\n            // Agregar zoom al mapa\n            const zoom = d3.zoom()\n               .scaleExtent([1, 8]) // Definir los límites de zoom\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n            // Inicializar el estado del zoom\n            this.currentZoom = 1;\n\n            \n         })\n         .catch(error => {\n            console.error(error);\n         });\n      const countries = this.$route.query.countries;\n      if (countries) {\n         const countryList = countries.split(\",\");\n         const selectedCountries = countryList.join(\", \");\n      }\n   },\n   methods: {\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n      changeColorOnClick(event) {\n         const path = event.target;\n\n         if (path.classList.contains('selectedPath')) {\n            // si ya está seleccionado, se quita el color\n            path.style.fill = 'black';\n            path.classList.remove('selectedPath');\n            // se elimina el país de la lista de países seleccionados\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n         } else {\n            // si no está seleccionado, se agrega el color\n            path.style.fill = 'green';\n            path.classList.add('selectedPath');\n            // se agrega el país a la lista de países seleccionados\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\n            console.log(this.selectedStates);\n         }\n      },\n\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n      changeColorOnHover(event) {\n         const path = event.target;\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'purple';\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n         }\n      },\n\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n      restoreColorOnHover(event) {\n         const path = event.target;\n\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'black';\n         }\n      },\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\n      clearSelection() {\n         // Vaciar el array de países seleccionados\n         this.selectedStates.splice(0);\n\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\n         selectedPaths.forEach(element => {\n            element.classList.remove(\"selectedPath\");\n            element.style.fill = \"black\";\n         });\n      },\n      // Función para hacer zoom\n      zoomIn() {\n         this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n         d3.select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar transición animada al zoom\n            .duration(500) // Duración de la transición\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n      },\n      // Función para hacer zoom out\n      zoomOut() {\n         this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n         d3.select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar una transición suave al zoom\n            .duration(500) // Duración de la transición (en milisegundos)\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n\n      },\n      // Función para hacer zoom con el scroll del ratón y draggear el mapa\n      zoomed(event) {\n         this.currentZoom = event.transform.k;\n         d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n      },\n      navigateToCharts() {\n         const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n         this.$router.push({ name: \"charts\", query: { countries: selectedCountries } });\n      },\n      getDataFromAPI() {\n         const apiUrl = `http://49.12.36.190/api/fertilizers-${selectedFertilizer.value}`;\n\n         axios.get(apiUrl)\n            .then(response => {\n               const data = response.data;\n               this.updateMapValues(data);\n            })\n            .catch(error => {\n               console.error(error);\n            });\n      },\n\n      updateMapValues(data) {\n         const paths = document.querySelectorAll('path');\n         const tooltip = document.createElement('div'); // Crea el elemento div para el tooltip\n         tooltip.style.position = 'absolute';\n         tooltip.style.backgroundColor = 'white';\n         tooltip.style.border = '1px solid gray';\n         tooltip.style.padding = '5px';\n         tooltip.style.pointerEvents = 'none';\n         tooltip.style.display = 'none'; // Oculta el tooltip por defecto\n         document.body.appendChild(tooltip); // Agrega el tooltip al body\n\n         paths.forEach(path => {\n            const code = path.getAttribute('id');\n            const value = data.find(item => item.code === code)?.amount ?? 0;\n            path.setAttribute('amount', value);\n\n            path.addEventListener('mouseover', () => {\n               // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\n               const x = event.clientX;\n               const y = event.clientY;\n               tooltip.style.top = `${y}px`;\n               tooltip.style.left = `${x}px`;\n               tooltip.style.display = 'block'; // Muestra el tooltip\n               tooltip.textContent = `${path.getAttribute('title')}: ${value}`;\n\n            });\n\n            path.addEventListener('mousemove', () => {\n               // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\n               const x = event.clientX;\n               const y = event.clientY;\n               tooltip.style.top = `${y}px`;\n               tooltip.style.left = `${x}px`;\n            });\n\n            path.addEventListener('mouseout', () => {\n               // Oculta el tooltip cuando el mouse sale del elemento \"path\"\n               tooltip.style.display = 'none';\n            });\n         });\n         this.updateMapColors();\n      },\n      createLegend(colorScale, colors) {\n         const legendContainer = document.createElement('div');\n         legendContainer.setAttribute('id', 'legend-container');\n         legendContainer.style.display = 'flex';\n         legendContainer.style.flexDirection = 'row';\n         legendContainer.style.alignItems = 'center';\n         legendContainer.style.justifyContent = 'center';\n         legendContainer.style.marginTop = '10px';\n\n         colors.forEach((color, index) => {\n            const colorBox = document.createElement('div');\n            colorBox.style.backgroundColor = color;\n            colorBox.style.width = '20px';\n            colorBox.style.height = '20px';\n            colorBox.style.margin = '0 5px';\n\n            const rangeText = document.createElement('span');\n            rangeText.style.marginLeft = '5px';\n            rangeText.style.marginRight = '10px';\n            const range = colorScale.invertExtent(color);\n            // Caso especial para el primer rango (0.00 - 0.00)\n            if (index === 0) {\n               rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\n            } else {\n               rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n            }\n\n            rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n\n            const legendItem = document.createElement('div');\n            legendItem.style.display = 'flex';\n            legendItem.style.alignItems = 'center';\n            legendItem.appendChild(colorBox);\n            legendItem.appendChild(rangeText);\n\n            legendContainer.appendChild(legendItem);\n\n         });\n\n         // Agrega la leyenda al final del body\n         document.body.appendChild(legendContainer);\n      },\n      updateMapColors() {\n         const paths = document.querySelectorAll('path');\n         const colors = [\n            '#F5E1F7',\n            '#E6B8E6',\n            '#D7A3D3',\n            '#C68FC6',\n            '#B67AB6',\n            '#A666A3',\n            '#965291',\n            '#854D80',\n            '#73386E',\n            '#62245C'\n\n         ];\n         const amounts = Array.from(paths, path => Number(path.getAttribute('amount')));\n         const maxAmount = Math.max(...amounts);\n         const colorScale = d3.scaleQuantile()\n            .domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\n            .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\n\n         paths.forEach(path => {\n            const amount = Number(path.getAttribute('amount'));\n            const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\n            path.style.fill = color;\n         });\n\n         // Crear leyenda\n         this.createLegend(colorScale, colors);\n      }\n   }\n};\n\n\n</script>\n\n\n<style scoped>\n.prio {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\nh2,\nh3,\nh4 {\n   color: red;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.map-container {\n   width: 100vw;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n\n.selected {\n   fill: green;\n}\n\npath {\n   fill: black;\n   transition: fill 0.5s ease-in-out;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n</style>\n"],"mappings":";;gEAGGA,mBAAA,CAAI;gEAEJA,mBAAA,CAAI;;EAGCC,KAAK,EAAC;AAAM;gEACdD,mBAAA,CAGM;EAHDE,KAA8D,EAA9D;IAAA;IAAA;IAAA;EAAA;AAA8D,I,aAChEF,mBAAA,CAAyB,YAArB,kBAAgB,G,aACpBA,mBAAA,CAA6D;EAAzDE,KAAkB,EAAlB;IAAA;EAAA,CAAkB;EAACC,EAAE,EAAC;GAAe,iBAAe,E;gEAE3DH,mBAAA,CAA4B,YAAxB,qBAAmB;;EAClBE,KAAsB,EAAtB;IAAA;EAAA;AAAsB;gEAa3BF,mBAAA,CAAkD;EAA1CI,KAAK,EAAC;AAAU,GAAC,kBAAgB;gEACzCJ,mBAAA,CAAwD;EAAhDI,KAAK,EAAC;AAAa,GAAC,qBAAmB;gEAC/CJ,mBAAA,CAAoD;EAA5CI,KAAK,EAAC;AAAW,GAAC,mBAAiB;qBAF3CC,UAAkD,EAClDC,UAAwD,EACxDC,UAAoD,C;;EAElDC,GAAG,EAAC;AAAO;;6DA9BhBR,mBAAA,CAAsD;IAA9CC,KAAK,EAAC,aAAa;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,GAAC,GAC7CX,mBAAA,CAAuD;IAA/CC,KAAK,EAAC,aAAa;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,OAAA,IAAAF,QAAA,CAAAE,OAAA,IAAAH,IAAA,CAAO;KAAE,GAAC,GAC9CI,UAAI,EACJf,mBAAA,CAAmF;IAA3EC,KAAK,EAAC,kBAAkB;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAI,cAAA,IAAAJ,QAAA,CAAAI,cAAA,IAAAL,IAAA,CAAc;KAAE,mBAAiB,GAC1EM,UAAI,EACUC,KAAA,CAAAC,cAAc,CAACC,MAAM,Q,cAAnCC,mBAAA,CAAiH;;IAAxEpB,KAAK,EAAC,kBAAkB;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAU,gBAAA,IAAAV,QAAA,CAAAU,gBAAA,IAAAX,IAAA,CAAgB;KAAE,cAAY,K,mCAExGX,mBAAA,CAiBM,OAjBNuB,UAiBM,GAhBHC,UAGM,EACNC,UAA4B,EAC5BzB,mBAAA,CASM,OATN0B,UASM,GARHC,mBAAA,gBAAmB,G,kBACnBN,mBAAA,CAEKO,SAAA,QAAAC,WAAA,CAFeX,KAAA,CAAAC,cAAc,EAAvBW,KAAK;yBAAhBT,mBAAA,CAEK;MAFgCU,GAAG,EAAED,KAAK,CAAC3B;wBAC1C2B,KAAK,CAAC3B,EAAE,IAAG,IAAE,GAAA6B,gBAAA,CAAGF,KAAK,CAACG,KAAK;kCAGjCN,mBAAA,mBAAsB,EACtBA,mBAAA,0JAC6B,C,KAInC3B,mBAAA,CAIS;IAJAkC,QAAM,EAAAxB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEwB,IAAA,CAAAC,oBAAA,IAAAD,IAAA,CAAAC,oBAAA,IAAAzB,IAAA,CAAoB;4CAKrCX,mBAAA,CACM,OADNqC,WACM,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}