{"ast":null,"code":"import { ref } from 'vue';\nimport SVG from 'svg.js';\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", \"1009.6727\").attr(\"height\", \"665.96301\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Obtener todos los elementos \"path\" del SVG\n      const paths = svg.selectAll('path');\n\n      // Asignar la función \"changeColorOnClick\" al evento \"click\" de cada elemento \"path\"\n      paths.on('click', changeColorOnClick);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n};\n\n// Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\nfunction changeColorOnClick(event) {\n  event.target.style.fill = 'green';\n}","map":{"version":3,"names":["ref","SVG","d3","mounted","svg","select","$refs","chart","append","attr","xml","require","then","data","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","changeColorOnClick","catch","error","console","event","target","style","fill"],"sources":["/home/lasmas/GitHub/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n\n   <div>\n      <h2> Selected Countries :</h2>\n      <div style=\"display:inline\">\n         <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n            {{ state.title }} </h4>\n      </div>\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: black\"> {{ hoverValue }} </h3>\n      </div>\n   </div>\n   <div ref=\"chart\">\n\n   \n      \n      <!-- intentar que los path sean devuelto por la API -->\n      <svg\n        :style=\"{ transform: `scale(${zoomLevel})` }\" @mouseover=\"changeHoverValue\" @click=\"setSelectedPath\"\n        >\n         \n      </svg>\n\n\n   </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport SVG from 'svg.js';\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    const svg = d3.select(this.$refs.chart)\n      .append(\"svg\")\n      .attr(\"width\", \"1009.6727\")\n      .attr(\"height\", \"665.96301\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\"))\n      .then(data => {\n        const importedNode = document.importNode(data.documentElement, true);\n        svg.node().appendChild(importedNode);\n\n        // Obtener todos los elementos \"path\" del SVG\n        const paths = svg.selectAll('path');\n\n        // Asignar la función \"changeColorOnClick\" al evento \"click\" de cada elemento \"path\"\n        paths.on('click', changeColorOnClick);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  },\n};\n\n// Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\nfunction changeColorOnClick(event) {\n  event.target.style.fill = 'green';\n}\n\n\n</script>\n\n<style scoped>\n@keyframes slowchange {\n   to {\n      fill: indianred;\n   }\n}\n\n@keyframes hoverChange {\n   to {\n      fill: purple;\n   }\n}\n\npath {\n   fill: black;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.logo {\n   height: 6em;\n   padding: 1.5em;\n   will-change: filter;\n}\n\n.logo:hover {\n   filter: drop-shadow(0 0 2em #646cffaa);\n}\n\n.logo.vue:hover {\n   filter: drop-shadow(0 0 2em #42b883aa);\n}\n\n.map-container {\n   width: 100vw;\n   /* ancho al 100% de la ventana */\n   /* height: 100vh; altura al 100% de la ventana */\n   display: flex;\n   justify-content: center;\n   /* centro horizontal */\n   align-items: center;\n   /* centro vertical */\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n.selected {\n  fill: green;\n}\n\n</style>\n"],"mappings":"AAiCA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,GAAE,MAAO,QAAQ;AACxB,OAAO,KAAKC,EAAC,MAAO,IAAI;AAExB,eAAe;EACbC,OAAOA,CAAA,EAAG;IACR,MAAMC,GAAE,GAAIF,EAAE,CAACG,MAAM,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,EACnCC,MAAM,CAAC,KAAK,EACZC,IAAI,CAAC,OAAO,EAAE,WAAW,EACzBA,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC;;IAE9B;IACAP,EAAE,CAACQ,GAAG,CAACC,OAAO,CAAC,oBAAoB,CAAC,EACjCC,IAAI,CAACC,IAAG,IAAK;MACZ,MAAMC,YAAW,GAAIC,QAAQ,CAACC,UAAU,CAACH,IAAI,CAACI,eAAe,EAAE,IAAI,CAAC;MACpEb,GAAG,CAACc,IAAI,EAAE,CAACC,WAAW,CAACL,YAAY,CAAC;;MAEpC;MACA,MAAMM,KAAI,GAAIhB,GAAG,CAACiB,SAAS,CAAC,MAAM,CAAC;;MAEnC;MACAD,KAAK,CAACE,EAAE,CAAC,OAAO,EAAEC,kBAAkB,CAAC;IACvC,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;AACF,CAAC;;AAED;AACA,SAASF,kBAAkBA,CAACI,KAAK,EAAE;EACjCA,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,IAAG,GAAI,OAAO;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}