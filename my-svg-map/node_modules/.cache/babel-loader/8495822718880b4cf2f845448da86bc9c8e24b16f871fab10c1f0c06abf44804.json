{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-46f53af0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Selected Countries:\", -1 /* HOISTED */));\nconst _hoisted_2 = {\n  style: {\n    \"display\": \"inline\"\n  }\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\",\n    \"text-align\": \"center\",\n    \"align-items\": \"center\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Hovered Country:\"), /*#__PURE__*/_createElementVNode(\"h3\", {\n  style: {\n    \"color\": \"black\"\n  },\n  id: \"hover-value2\"\n}, \"Move your mouse\")], -1 /* HOISTED */));\nconst _hoisted_4 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"button\", {\n    class: \"button-container\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.clearSelection && $options.clearSelection(...args))\n  }, \" Clear Selection \"), _createElementVNode(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" up to down \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedStates, state => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: state.id\n    }, _toDisplayString(state.id) + \": \" + _toDisplayString(state.title), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" right to left \"), _createCommentVNode(\" <h4 style=\\\"display:inline; margin:10px;\\\" v-for=\\\"state in selectedStates\\\" :key=\\\"state.id\\\"> {{ state.id }} :\\n           {{ state.title }} </h4> \")]), _hoisted_3]), _createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","style","id","ref","class","onClick","_cache","args","$options","clearSelection","_hoisted_1","_hoisted_2","_createCommentVNode","_createElementBlock","_Fragment","_renderList","$data","selectedStates","state","key","_toDisplayString","title","_hoisted_3","_hoisted_4"],"sources":["/home/lasmas/GitHub/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n\n   <div>\n      <h2>Selected Countries:</h2>\n      <div style=\"display:inline\">\n         <!-- up to down -->\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\n            {{ state.id }}: {{ state.title }}\n         </h4>\n\n         <!-- right to left -->\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n           {{ state.title }} </h4> -->\n      </div>\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: black\" id=\"hover-value2\">Move your mouse</h3>\n      </div>\n   </div>\n   <div ref=\"chart\">\n   </div>\n</template>\n\n\n<script>\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\n\nexport default {\n   data() {\n      return {\n         selectedStates: ref([])\n      }\n   },\n   mounted() {\n      const svg = d3.select(this.$refs.chart)\n         .append(\"svg\")\n         .attr('width', '75%')\n         .attr('height', '100%')\n         .style(\"position\", \"fixed\")\n         .style('left', '25%')\n         .style('top', '20%');\n\n      // Se crea la función de zoom y se agrega al svg\n      const zoom = d3.zoom()\n         .scaleExtent([0.5, 8])\n         .on('zoom', () => {\n            svg.attr('transform', d3.event.transform);\n         });\n      svg.call(zoom);\n\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n      d3.xml(require(\"@/assets/world.svg\"))\n         .then(data => {\n            const importedNode = document.importNode(data.documentElement, true);\n            svg.node().appendChild(importedNode);\n\n            // Obtener todos los elementos \"path\" del SVG\n            const paths = svg.selectAll('path');\n\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n            paths\n               .on('click', this.changeColorOnClick)\n               .on('mouseover', this.changeColorOnHover)\n               .on('mouseout', this.restoreColorOnHover);\n         })\n         .catch(error => {\n            console.error(error);\n         });\n   },\n   methods: {\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n      changeColorOnClick(event) {\n         const path = event.target;\n\n         if (path.classList.contains('selectedPath')) {\n            // si ya está seleccionado, se quita el color\n            path.style.fill = 'black';\n            path.classList.remove('selectedPath');\n            // se elimina el país de la lista de países seleccionados\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n         } else {\n            // si no está seleccionado, se agrega el color\n            path.style.fill = 'green';\n            path.classList.add('selectedPath');\n            // se agrega el país a la lista de países seleccionados\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\n            console.log(this.selectedStates);\n         }\n      },\n\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n      changeColorOnHover(event) {\n         const path = event.target;\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'purple';\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n         }\n      },\n\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n      restoreColorOnHover(event) {\n         const path = event.target;\n\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'black';\n         }\n      },\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\n      clearSelection() {\n         // Vaciar el array de países seleccionados\n         this.selectedStates.splice(0);\n\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\n         selectedPaths.forEach(element => {\n            element.classList.remove(\"selectedPath\");\n            element.style.fill = \"black\";\n         });\n      },\n      zoomIn() {\n         const svg = d3.select(this.$refs.chart).select(\"svg\");\n         const zoom = d3.zoom().scaleBy\n      }\n   }\n}\n</script>\n\n\n<style scoped>\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.map-container {\n   width: 100vw;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n\n.selected {\n   fill: green;\n}\n\npath {\n   fill: black;\n   transition: fill 0.5s ease-in-out;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n</style>\n"],"mappings":";;gEAIMA,mBAAA,CAA4B,YAAxB,qBAAmB;;EAClBC,KAAsB,EAAtB;IAAA;EAAA;AAAsB;gEAU3BD,mBAAA,CAGM;EAHDC,KAA8D,EAA9D;IAAA;IAAA;IAAA;EAAA;AAA8D,I,aAChED,mBAAA,CAAyB,YAArB,kBAAgB,G,aACpBA,mBAAA,CAA+D;EAA3DC,KAAoB,EAApB;IAAA;EAAA,CAAoB;EAACC,EAAE,EAAC;GAAe,iBAAe,E;;EAG3DC,GAAG,EAAC;AAAO;;6DAnBhBH,mBAAA,CAAmF;IAA3EI,KAAK,EAAC,kBAAkB;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,mBAAiB,GAE1EP,mBAAA,CAgBM,cAfHU,UAA4B,EAC5BV,mBAAA,CASM,OATNW,UASM,GARHC,mBAAA,gBAAmB,G,kBACnBC,mBAAA,CAEKC,SAAA,QAAAC,WAAA,CAFeC,KAAA,CAAAC,cAAc,EAAvBC,KAAK;yBAAhBL,mBAAA,CAEK;MAFgCM,GAAG,EAAED,KAAK,CAAChB;wBAC1CgB,KAAK,CAAChB,EAAE,IAAG,IAAE,GAAAkB,gBAAA,CAAGF,KAAK,CAACG,KAAK;kCAGjCT,mBAAA,mBAAsB,EACtBA,mBAAA,0JAC6B,C,GAEhCU,UAGM,C,GAETtB,mBAAA,CACM,OADNuB,UACM,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}