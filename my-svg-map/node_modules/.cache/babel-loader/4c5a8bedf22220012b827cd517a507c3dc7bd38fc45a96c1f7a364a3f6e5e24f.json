{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      selectedStates: ref([])\n    };\n  },\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr('width', '75%').attr('height', '100%').style(\"position\", \"fixed\").style('left', '25%').style('top', '20%');\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Obtener todos los elementos \"path\" del SVG\n      const paths = svg.selectAll('path');\n\n      // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n      paths.on('click', this.changeColorOnClick).on('mouseover', this.changeColorOnHover).on('mouseout', this.restoreColorOnHover);\n\n      // Agregar zoom al mapa\n      const zoom = d3.zoom().scaleExtent([1, 8]) // Definir los límites de zoom\n      .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n      svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n      // Inicializar el estado del zoom\n      this.currentZoom = 1;\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  methods: {\n    // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n    changeColorOnClick(event) {\n      const path = event.target;\n      if (path.classList.contains('selectedPath')) {\n        // si ya está seleccionado, se quita el color\n        path.style.fill = 'black';\n        path.classList.remove('selectedPath');\n        // se elimina el país de la lista de países seleccionados\n        this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n      } else {\n        // si no está seleccionado, se agrega el color\n        path.style.fill = 'green';\n        path.classList.add('selectedPath');\n        // se agrega el país a la lista de países seleccionados\n        this.selectedStates.push({\n          id: path.id,\n          title: path.getAttribute('title')\n        });\n        console.log(this.selectedStates);\n      }\n    },\n    // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n    changeColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains('selectedPath')) {\n        path.style.fill = 'purple';\n        document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n      }\n    },\n    // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n    restoreColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains('selectedPath')) {\n        path.style.fill = 'black';\n      }\n    },\n    // Funcion para vaciar la array y quitar el color de los paises seleccionados\n    clearSelection() {\n      // Vaciar el array de países seleccionados\n      this.selectedStates.splice(0);\n\n      // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\n      selectedPaths.forEach(element => {\n        element.classList.remove(\"selectedPath\");\n        element.style.fill = \"black\";\n      });\n    },\n    // Función para hacer zoom\n    zoomIn() {\n      this.currentZoom = Math.min(this.currentZoom + 0.2, 8); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n      d3.select(this.$refs.chart).select('svg') // Seleccionar el elemento SVG\n      .transition() // Agregar transición suave\n      .duration(500).call(d3.zoom().scaleTo, this.currentZoom); // Actualizar la escala del zoom\n    },\n\n    zoomOut() {\n      const svg = d3.select(this.$refs.chart).select(\"svg\");\n\n      // Obtener la matriz de transformación actual\n      const transform = d3.zoomTransform(svg.node());\n\n      // Disminuir la escala\n      const newScale = transform.k / 1.5;\n\n      // Actualizar la transformación con la nueva escala\n      svg.transition().duration(750).call(this.zoom.transform, d3.zoomIdentity.scale(newScale));\n    }\n  }\n};","map":{"version":3,"names":["ref","d3","data","selectedStates","mounted","svg","select","$refs","chart","append","attr","style","xml","require","then","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","changeColorOnClick","changeColorOnHover","restoreColorOnHover","zoom","scaleExtent","zoomed","call","currentZoom","catch","error","console","methods","event","path","target","classList","contains","fill","remove","filter","state","id","add","push","title","getAttribute","log","getElementById","textContent","clearSelection","splice","selectedPaths","querySelectorAll","forEach","element","zoomIn","Math","min","transition","duration","scaleTo","zoomOut","transform","zoomTransform","newScale","k","zoomIdentity","scale"],"sources":["/home/lasmas/GitHub/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n\n   <div>\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: black\" id=\"hover-value2\">Move your mouse</h3>\n      </div>\n      <h2>Selected Countries:</h2>\n      <div style=\"display:inline\">\n         <!-- up to down -->\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\n            {{ state.id }}: {{ state.title }}\n         </h4>\n\n         <!-- right to left -->\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n           {{ state.title }} </h4> -->\n      </div>\n   </div>\n   <div ref=\"chart\">\n   </div>\n</template>\n\n\n<script>\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\n\nexport default {\n   data() {\n      return {\n         selectedStates: ref([])\n      }\n   },\n   mounted() {\n      const svg = d3.select(this.$refs.chart)\n         .append(\"svg\")\n         .attr('width', '75%')\n         .attr('height', '100%')\n         .style(\"position\", \"fixed\")\n         .style('left', '25%')\n         .style('top', '20%');\n\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n      d3.xml(require(\"@/assets/world.svg\"))\n         .then(data => {\n            const importedNode = document.importNode(data.documentElement, true);\n            svg.node().appendChild(importedNode);\n\n            // Obtener todos los elementos \"path\" del SVG\n            const paths = svg.selectAll('path');\n\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n            paths\n               .on('click', this.changeColorOnClick)\n               .on('mouseover', this.changeColorOnHover)\n               .on('mouseout', this.restoreColorOnHover);\n\n            // Agregar zoom al mapa\n            const zoom = d3.zoom()\n               .scaleExtent([1, 8]) // Definir los límites de zoom\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n            // Inicializar el estado del zoom\n            this.currentZoom = 1;\n         })\n         .catch(error => {\n            console.error(error);\n         });\n   },\n   methods: {\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n      changeColorOnClick(event) {\n         const path = event.target;\n\n         if (path.classList.contains('selectedPath')) {\n            // si ya está seleccionado, se quita el color\n            path.style.fill = 'black';\n            path.classList.remove('selectedPath');\n            // se elimina el país de la lista de países seleccionados\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n         } else {\n            // si no está seleccionado, se agrega el color\n            path.style.fill = 'green';\n            path.classList.add('selectedPath');\n            // se agrega el país a la lista de países seleccionados\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\n            console.log(this.selectedStates);\n         }\n      },\n\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n      changeColorOnHover(event) {\n         const path = event.target;\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'purple';\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n         }\n      },\n\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n      restoreColorOnHover(event) {\n         const path = event.target;\n\n         if (!path.classList.contains('selectedPath')) {\n            path.style.fill = 'black';\n         }\n      },\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\n      clearSelection() {\n         // Vaciar el array de países seleccionados\n         this.selectedStates.splice(0);\n\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\n         selectedPaths.forEach(element => {\n            element.classList.remove(\"selectedPath\");\n            element.style.fill = \"black\";\n         });\n      },\n      // Función para hacer zoom\n      zoomIn() {\n         this.currentZoom = Math.min(this.currentZoom + 0.2, 8); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n         d3.select(this.$refs.chart).select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar transición suave\n            .duration(500)\n            .call(d3.zoom().scaleTo, this.currentZoom); // Actualizar la escala del zoom\n      },\n      zoomOut() {\n         const svg = d3.select(this.$refs.chart).select(\"svg\");\n\n         // Obtener la matriz de transformación actual\n         const transform = d3.zoomTransform(svg.node());\n\n         // Disminuir la escala\n         const newScale = transform.k / 1.5;\n\n         // Actualizar la transformación con la nueva escala\n         svg.transition().duration(750)\n            .call(this.zoom.transform, d3.zoomIdentity.scale(newScale));\n      }\n   }\n}\n</script>\n\n\n<style scoped>\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.map-container {\n   width: 100vw;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n\n.selected {\n   fill: green;\n}\n\npath {\n   fill: black;\n   transition: fill 0.5s ease-in-out;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n</style>\n"],"mappings":";AA6BA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAO,KAAKC,EAAC,MAAO,IAAI;AAExB,eAAe;EACZC,IAAIA,CAAA,EAAG;IACJ,OAAO;MACJC,cAAc,EAAEH,GAAG,CAAC,EAAE;IACzB;EACH,CAAC;EACDI,OAAOA,CAAA,EAAG;IACP,MAAMC,GAAE,GAAIJ,EAAE,CAACK,MAAM,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,EAClCC,MAAM,CAAC,KAAK,EACZC,IAAI,CAAC,OAAO,EAAE,KAAK,EACnBA,IAAI,CAAC,QAAQ,EAAE,MAAM,EACrBC,KAAK,CAAC,UAAU,EAAE,OAAO,EACzBA,KAAK,CAAC,MAAM,EAAE,KAAK,EACnBA,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC;;IAEvB;IACAV,EAAE,CAACW,GAAG,CAACC,OAAO,CAAC,oBAAoB,CAAC,EAChCC,IAAI,CAACZ,IAAG,IAAK;MACX,MAAMa,YAAW,GAAIC,QAAQ,CAACC,UAAU,CAACf,IAAI,CAACgB,eAAe,EAAE,IAAI,CAAC;MACpEb,GAAG,CAACc,IAAI,EAAE,CAACC,WAAW,CAACL,YAAY,CAAC;;MAEpC;MACA,MAAMM,KAAI,GAAIhB,GAAG,CAACiB,SAAS,CAAC,MAAM,CAAC;;MAEnC;MACAD,KAAI,CACAE,EAAE,CAAC,OAAO,EAAE,IAAI,CAACC,kBAAkB,EACnCD,EAAE,CAAC,WAAW,EAAE,IAAI,CAACE,kBAAkB,EACvCF,EAAE,CAAC,UAAU,EAAE,IAAI,CAACG,mBAAmB,CAAC;;MAE5C;MACA,MAAMC,IAAG,GAAI1B,EAAE,CAAC0B,IAAI,EAAC,CACjBC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAAA,CACpBL,EAAE,CAAC,MAAM,EAAE,IAAI,CAACM,MAAM,CAAC,EAAE;;MAE7BxB,GAAG,CAACyB,IAAI,CAACH,IAAI,CAAC,EAAE;;MAEhB;MACA,IAAI,CAACI,WAAU,GAAI,CAAC;IACvB,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACvB,CAAC,CAAC;EACR,CAAC;EACDE,OAAO,EAAE;IACN;IACAX,kBAAkBA,CAACY,KAAK,EAAE;MACvB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM;MAEzB,IAAID,IAAI,CAACE,SAAS,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC1C;QACAH,IAAI,CAAC1B,KAAK,CAAC8B,IAAG,GAAI,OAAO;QACzBJ,IAAI,CAACE,SAAS,CAACG,MAAM,CAAC,cAAc,CAAC;QACrC;QACA,IAAI,CAACvC,cAAa,GAAI,IAAI,CAACA,cAAc,CAACwC,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,EAAC,KAAMR,IAAI,CAACQ,EAAE,CAAC;MAClF,OAAO;QACJ;QACAR,IAAI,CAAC1B,KAAK,CAAC8B,IAAG,GAAI,OAAO;QACzBJ,IAAI,CAACE,SAAS,CAACO,GAAG,CAAC,cAAc,CAAC;QAClC;QACA,IAAI,CAAC3C,cAAc,CAAC4C,IAAI,CAAC;UAAEF,EAAE,EAAER,IAAI,CAACQ,EAAE;UAAEG,KAAK,EAAEX,IAAI,CAACY,YAAY,CAAC,OAAO;QAAE,CAAC,CAAC;QAC5Ef,OAAO,CAACgB,GAAG,CAAC,IAAI,CAAC/C,cAAc,CAAC;MACnC;IACH,CAAC;IAED;IACAsB,kBAAkBA,CAACW,KAAK,EAAE;MACvB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM;MACzB,IAAI,CAACD,IAAI,CAACE,SAAS,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC3CH,IAAI,CAAC1B,KAAK,CAAC8B,IAAG,GAAI,QAAQ;QAC1BzB,QAAQ,CAACmC,cAAc,CAAC,cAAc,CAAC,CAACC,WAAU,GAAIf,IAAI,CAACY,YAAY,CAAC,OAAO,CAAC;MACnF;IACH,CAAC;IAED;IACAvB,mBAAmBA,CAACU,KAAK,EAAE;MACxB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM;MAEzB,IAAI,CAACD,IAAI,CAACE,SAAS,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC3CH,IAAI,CAAC1B,KAAK,CAAC8B,IAAG,GAAI,OAAO;MAC5B;IACH,CAAC;IACD;IACAY,cAAcA,CAAA,EAAG;MACd;MACA,IAAI,CAAClD,cAAc,CAACmD,MAAM,CAAC,CAAC,CAAC;;MAE7B;MACA,MAAMC,aAAY,GAAIvC,QAAQ,CAACwC,gBAAgB,CAAC,eAAe,CAAC;MAChED,aAAa,CAACE,OAAO,CAACC,OAAM,IAAK;QAC9BA,OAAO,CAACnB,SAAS,CAACG,MAAM,CAAC,cAAc,CAAC;QACxCgB,OAAO,CAAC/C,KAAK,CAAC8B,IAAG,GAAI,OAAO;MAC/B,CAAC,CAAC;IACL,CAAC;IACD;IACAkB,MAAMA,CAAA,EAAG;MACN,IAAI,CAAC5B,WAAU,GAAI6B,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC9B,WAAU,GAAI,GAAG,EAAE,CAAC,CAAC,EAAE;MACxD9B,EAAE,CAACK,MAAM,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,CAACF,MAAM,CAAC,KAAK,EAAE;MAAA,CACtCwD,UAAU,EAAC,CAAE;MAAA,CACbC,QAAQ,CAAC,GAAG,EACZjC,IAAI,CAAC7B,EAAE,CAAC0B,IAAI,EAAE,CAACqC,OAAO,EAAE,IAAI,CAACjC,WAAW,CAAC,EAAE;IAClD,CAAC;;IACDkC,OAAOA,CAAA,EAAG;MACP,MAAM5D,GAAE,GAAIJ,EAAE,CAACK,MAAM,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,CAACF,MAAM,CAAC,KAAK,CAAC;;MAErD;MACA,MAAM4D,SAAQ,GAAIjE,EAAE,CAACkE,aAAa,CAAC9D,GAAG,CAACc,IAAI,EAAE,CAAC;;MAE9C;MACA,MAAMiD,QAAO,GAAIF,SAAS,CAACG,CAAA,GAAI,GAAG;;MAElC;MACAhE,GAAG,CAACyD,UAAU,EAAE,CAACC,QAAQ,CAAC,GAAG,EACzBjC,IAAI,CAAC,IAAI,CAACH,IAAI,CAACuC,SAAS,EAAEjE,EAAE,CAACqE,YAAY,CAACC,KAAK,CAACH,QAAQ,CAAC,CAAC;IACjE;EACH;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}