{"ast":null,"code":"import { ref } from 'vue';\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", \"1009.6727\").attr(\"height\", \"665.96301\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Obtener todos los elementos \"path\" del SVG\n      const paths = svg.selectAll('path');\n\n      // Asignar la función \"setSelectedPath\" al evento \"click\" de cada elemento \"path\"\n      paths.on('click', setSelectedPath);\n    }).catch(error => {\n      console.error(error);\n    });\n  },\n  methods: {\n    setSelectedPath(event) {\n      const selectedPath = event.target;\n      const selected = selectedPath.classList.contains('selected');\n\n      // Si el path ya está seleccionado, lo deseleccionamos\n      if (selected) {\n        selectedPath.classList.remove('selected');\n      } else {\n        selectedPath.classList.add('selected');\n      }\n    }\n  }\n};","map":{"version":3,"names":["ref","d3","mounted","svg","select","$refs","chart","append","attr","xml","require","then","data","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","setSelectedPath","catch","error","console","methods","event","selectedPath","target","selected","classList","contains","remove","add"],"sources":["/home/lasmas/GitHub/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n\n   <div>\n      <h2> Selected Countries :</h2>\n      <div style=\"display:inline\">\n         <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n            {{ state.title }} </h4>\n      </div>\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: black\"> {{ hoverValue }} </h3>\n      </div>\n   </div>\n   <div ref=\"chart\">\n      <svg\n        :style=\"{ transform: `scale(${zoomLevel})` }\" @mouseover=\"changeHoverValue\" @click=\"setSelectedPath\"\n        >\n      </svg>\n\n\n   </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    const svg = d3.select(this.$refs.chart)\n      .append(\"svg\")\n      .attr(\"width\", \"1009.6727\")\n      .attr(\"height\", \"665.96301\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\"))\n      .then(data => {\n        const importedNode = document.importNode(data.documentElement, true);\n        svg.node().appendChild(importedNode);\n\n        // Obtener todos los elementos \"path\" del SVG\n        const paths = svg.selectAll('path');\n\n        // Asignar la función \"setSelectedPath\" al evento \"click\" de cada elemento \"path\"\n        paths.on('click', setSelectedPath);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  },\n  methods: {\n    setSelectedPath(event) {\n      const selectedPath = event.target;\n      const selected = selectedPath.classList.contains('selected');\n\n      // Si el path ya está seleccionado, lo deseleccionamos\n      if (selected) {\n        selectedPath.classList.remove('selected');\n      } else {\n        selectedPath.classList.add('selected');\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\npath {\n  fill: black;\n  transition: fill 0.5s ease;\n}\n\n.selected {\n  fill: green !important;\n}\n\n@keyframes selection {\n  from {\n    fill: black;\n  }\n  to {\n    fill: green;\n  }\n}\n\n.selected.animate {\n  animation-name: selection;\n  animation-duration: 0.5s;\n}\n</style>"],"mappings":"AA4BA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAO,KAAKC,EAAC,MAAO,IAAI;AAExB,eAAe;EACbC,OAAOA,CAAA,EAAG;IACR,MAAMC,GAAE,GAAIF,EAAE,CAACG,MAAM,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,EACnCC,MAAM,CAAC,KAAK,EACZC,IAAI,CAAC,OAAO,EAAE,WAAW,EACzBA,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC;;IAE9B;IACAP,EAAE,CAACQ,GAAG,CAACC,OAAO,CAAC,oBAAoB,CAAC,EACjCC,IAAI,CAACC,IAAG,IAAK;MACZ,MAAMC,YAAW,GAAIC,QAAQ,CAACC,UAAU,CAACH,IAAI,CAACI,eAAe,EAAE,IAAI,CAAC;MACpEb,GAAG,CAACc,IAAI,EAAE,CAACC,WAAW,CAACL,YAAY,CAAC;;MAEpC;MACA,MAAMM,KAAI,GAAIhB,GAAG,CAACiB,SAAS,CAAC,MAAM,CAAC;;MAEnC;MACAD,KAAK,CAACE,EAAE,CAAC,OAAO,EAAEC,eAAe,CAAC;IACpC,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC;EACDE,OAAO,EAAE;IACPJ,eAAeA,CAACK,KAAK,EAAE;MACrB,MAAMC,YAAW,GAAID,KAAK,CAACE,MAAM;MACjC,MAAMC,QAAO,GAAIF,YAAY,CAACG,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC;;MAE5D;MACA,IAAIF,QAAQ,EAAE;QACZF,YAAY,CAACG,SAAS,CAACE,MAAM,CAAC,UAAU,CAAC;MAC3C,OAAO;QACLL,YAAY,CAACG,SAAS,CAACG,GAAG,CAAC,UAAU,CAAC;MACxC;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}