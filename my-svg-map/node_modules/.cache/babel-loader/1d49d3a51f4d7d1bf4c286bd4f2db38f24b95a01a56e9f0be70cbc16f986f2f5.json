{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-46f53af0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"prio\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\",\n    \"text-align\": \"center\",\n    \"align-items\": \"center\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Hovered Country:\"), /*#__PURE__*/_createElementVNode(\"h3\", {\n  style: {\n    \"color\": \"red\"\n  },\n  id: \"hover-value2\"\n}, \"Move your mouse\")], -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Selected Countries:\", -1 /* HOISTED */));\nconst _hoisted_6 = {\n  style: {\n    \"display\": \"inline\"\n  }\n};\nconst _hoisted_7 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.zoomIn && $options.zoomIn(...args))\n  }, \"+\"), _createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.zoomOut && $options.zoomOut(...args))\n  }, \"-\"), _hoisted_1, _createElementVNode(\"button\", {\n    class: \"button-container\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.clearSelection && $options.clearSelection(...args))\n  }, \" Clear Selection \"), _hoisted_2, $data.selectedStates.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"button-container\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.navigateToCharts && $options.navigateToCharts(...args))\n  }, \"Go to charts\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" up to down \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedStates, state => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: state.id\n    }, _toDisplayString(state.id) + \": \" + _toDisplayString(state.title), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" right to left \"), _createCommentVNode(\" <h4 style=\\\"display:inline; margin:10px;\\\" v-for=\\\"state in selectedStates\\\" :key=\\\"state.id\\\"> {{ state.id }} :\\r\\n           {{ state.title }} </h4> \")])]), _createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","style","id","ref","onClick","_cache","args","$options","zoomIn","zoomOut","_hoisted_1","clearSelection","_hoisted_2","$data","selectedStates","length","_createElementBlock","navigateToCharts","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_createCommentVNode","_Fragment","_renderList","state","key","_toDisplayString","title","_hoisted_7"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\SVGMap.vue"],"sourcesContent":["<template>\r\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\r\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\r\n   <br>\r\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\r\n   <br>\r\n   <button v-if=\"selectedStates.length > 1\" class=\"button-container\" @click=\"navigateToCharts\">Go to charts</button>\r\n\r\n   <div class=\"prio\">\r\n      <div style=\"display:flex; text-align: center; align-items: center;\">\r\n         <h2>Hovered Country:</h2>\r\n         <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\r\n      </div>\r\n      <h2>Selected Countries:</h2>\r\n      <div style=\"display:inline\">\r\n         <!-- up to down -->\r\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\r\n            {{ state.id }}: {{ state.title }}\r\n         </h4>\r\n\r\n         <!-- right to left -->\r\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\r\n           {{ state.title }} </h4> -->\r\n      </div>\r\n   </div>\r\n   <div ref=\"chart\">\r\n   </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n   data() {\r\n      return {\r\n         selectedStates: ref([]),\r\n         currentZoom: 1,\r\n         name: \"charts\"\r\n      }\r\n   },\r\n   mounted() {\r\n      const svg = d3.select(this.$refs.chart)\r\n         .append(\"svg\")\r\n         .attr('width', '75%')\r\n         .attr('height', '100%')\r\n         .style(\"position\", \"fixed\")\r\n         .style('left', '25%')\r\n         .style('top', '20%');\r\n\r\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\r\n      d3.xml(require(\"@/assets/world.svg\"))\r\n         .then(data => {\r\n            const importedNode = document.importNode(data.documentElement, true);\r\n            svg.node().appendChild(importedNode);\r\n\r\n            // Obtener todos los elementos \"path\" del SVG\r\n            const paths = svg.selectAll('path');\r\n\r\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\r\n            paths\r\n               .on('click', this.changeColorOnClick)\r\n               .on('mouseover', this.changeColorOnHover)\r\n               .on('mouseout', this.restoreColorOnHover);\r\n\r\n            // Agregar zoom al mapa\r\n            const zoom = d3.zoom()\r\n               .scaleExtent([1, 8]) // Definir los límites de zoom\r\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\r\n\r\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\r\n\r\n            // Inicializar el estado del zoom\r\n            this.currentZoom = 1;\r\n         })\r\n         .catch(error => {\r\n            console.error(error);\r\n         });\r\n      const countries = this.$route.query.countries;\r\n      if (countries) {\r\n         const countryList = countries.split(\",\");\r\n         const selectedCountries = countryList.join(\", \");\r\n      }\r\n   },\r\n   methods: {\r\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\r\n      changeColorOnClick(event) {\r\n         const path = event.target;\r\n\r\n         if (path.classList.contains('selectedPath')) {\r\n            // si ya está seleccionado, se quita el color\r\n            path.style.fill = 'black';\r\n            path.classList.remove('selectedPath');\r\n            // se elimina el país de la lista de países seleccionados\r\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\r\n         } else {\r\n            // si no está seleccionado, se agrega el color\r\n            path.style.fill = 'green';\r\n            path.classList.add('selectedPath');\r\n            // se agrega el país a la lista de países seleccionados\r\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\r\n            console.log(this.selectedStates);\r\n         }\r\n      },\r\n\r\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\r\n      changeColorOnHover(event) {\r\n         const path = event.target;\r\n         if (!path.classList.contains('selectedPath')) {\r\n            path.style.fill = 'purple';\r\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\r\n         }\r\n      },\r\n\r\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\r\n      restoreColorOnHover(event) {\r\n         const path = event.target;\r\n\r\n         if (!path.classList.contains('selectedPath')) {\r\n            path.style.fill = 'black';\r\n         }\r\n      },\r\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\r\n      clearSelection() {\r\n         // Vaciar el array de países seleccionados\r\n         this.selectedStates.splice(0);\r\n\r\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\r\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\r\n         selectedPaths.forEach(element => {\r\n            element.classList.remove(\"selectedPath\");\r\n            element.style.fill = \"black\";\r\n         });\r\n      },\r\n      // Función para hacer zoom\r\n      zoomIn() {\r\n         this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\r\n         d3.select('svg') // Seleccionar el elemento SVG\r\n            .transition() // Agregar transición animada al zoom\r\n            .duration(500) // Duración de la transición\r\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\r\n      },\r\n      // Función para hacer zoom out\r\n      zoomOut() {\r\n         this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\r\n         d3.select('svg') // Seleccionar el elemento SVG\r\n            .transition() // Agregar una transición suave al zoom\r\n            .duration(500) // Duración de la transición (en milisegundos)\r\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\r\n\r\n      },\r\n      // Función para hacer zoom con el scroll del ratón y draggear el mapa\r\n      zoomed(event) {\r\n         this.currentZoom = event.transform.k;\r\n         d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\r\n      },\r\n      navigateToCharts() {\r\n         const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\r\n         this.$router.push({ name: \"charts\", query: { countries: selectedCountries } });\r\n      }\r\n\r\n   }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.prio {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: fit-content;\r\n   height: fit-content;\r\n}\r\n\r\nh2,\r\nh3,\r\nh4 {\r\n   color: red;\r\n}\r\n\r\n.selectedPath {\r\n   animation-name: slowchange;\r\n   animation-duration: 1.5s;\r\n   animation-fill-mode: forwards;\r\n}\r\n\r\npath:hover {\r\n   animation-name: hoverChange;\r\n   animation-duration: 1s;\r\n   animation-fill-mode: forwards;\r\n}\r\n\r\n.map-container {\r\n   width: 100vw;\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n}\r\n\r\n.button-container {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: fit-content;\r\n   height: fit-content;\r\n}\r\n\r\n.button-zoom {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: 2%;\r\n   height: 2%;\r\n}\r\n\r\n.draggeable {\r\n   cursor: move;\r\n}\r\n\r\n.selected {\r\n   fill: green;\r\n}\r\n\r\npath {\r\n   fill: black;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\n.selectedPath {\r\n   animation-name: slowchange;\r\n   animation-duration: 1.5s;\r\n   animation-fill-mode: forwards;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\npath:hover {\r\n   animation-name: hoverChange;\r\n   animation-duration: 1s;\r\n   animation-fill-mode: forwards;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n</style>\r\n"],"mappings":";;gEAGGA,mBAAA,CAAI;gEAEJA,mBAAA,CAAI;;EAGCC,KAAK,EAAC;AAAM;gEACdD,mBAAA,CAGM;EAHDE,KAA8D,EAA9D;IAAA;IAAA;IAAA;EAAA;AAA8D,I,aAChEF,mBAAA,CAAyB,YAArB,kBAAgB,G,aACpBA,mBAAA,CAA6D;EAAzDE,KAAkB,EAAlB;IAAA;EAAA,CAAkB;EAACC,EAAE,EAAC;GAAe,iBAAe,E;gEAE3DH,mBAAA,CAA4B,YAAxB,qBAAmB;;EAClBE,KAAsB,EAAtB;IAAA;EAAA;AAAsB;;EAWzBE,GAAG,EAAC;AAAO;;6DAxBhBJ,mBAAA,CAAsD;IAA9CC,KAAK,EAAC,aAAa;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,GAAC,GAC7CP,mBAAA,CAAuD;IAA/CC,KAAK,EAAC,aAAa;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,OAAA,IAAAF,QAAA,CAAAE,OAAA,IAAAH,IAAA,CAAO;KAAE,GAAC,GAC9CI,UAAI,EACJX,mBAAA,CAAmF;IAA3EC,KAAK,EAAC,kBAAkB;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAI,cAAA,IAAAJ,QAAA,CAAAI,cAAA,IAAAL,IAAA,CAAc;KAAE,mBAAiB,GAC1EM,UAAI,EACUC,KAAA,CAAAC,cAAc,CAACC,MAAM,Q,cAAnCC,mBAAA,CAAiH;;IAAxEhB,KAAK,EAAC,kBAAkB;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAU,gBAAA,IAAAV,QAAA,CAAAU,gBAAA,IAAAX,IAAA,CAAgB;KAAE,cAAY,K,mCAExGP,mBAAA,CAgBM,OAhBNmB,UAgBM,GAfHC,UAGM,EACNC,UAA4B,EAC5BrB,mBAAA,CASM,OATNsB,UASM,GARHC,mBAAA,gBAAmB,G,kBACnBN,mBAAA,CAEKO,SAAA,QAAAC,WAAA,CAFeX,KAAA,CAAAC,cAAc,EAAvBW,KAAK;yBAAhBT,mBAAA,CAEK;MAFgCU,GAAG,EAAED,KAAK,CAACvB;wBAC1CuB,KAAK,CAACvB,EAAE,IAAG,IAAE,GAAAyB,gBAAA,CAAGF,KAAK,CAACG,KAAK;kCAGjCN,mBAAA,mBAAsB,EACtBA,mBAAA,4JAC6B,C,KAGnCvB,mBAAA,CACM,OADN8B,UACM,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}