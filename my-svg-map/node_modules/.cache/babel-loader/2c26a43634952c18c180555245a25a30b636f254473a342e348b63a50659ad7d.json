{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-9e80e8e2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"prio2\",\n  style: {\n    \"display\": \"flex\",\n    \"justify-content\": \"center\",\n    \"margin-top\": \"10px\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h3\", null, \"Select year\"), /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"range\",\n  id: \"year-slider\",\n  min: \"1961\",\n  max: \"2019\",\n  step: \"1\",\n  value: \"1961\"\n}), /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"play-button\"\n}, \"Play\")], -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Select fertilizer\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"nitrogen\"\n}, \"Nitrogen Derived\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"phosphorous\"\n}, \"Phosphorous Derived\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"potassium\"\n}, \"Potassium Derived\", -1 /* HOISTED */));\nconst _hoisted_6 = [_hoisted_3, _hoisted_4, _hoisted_5];\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_10 = {\n  class: \"prio\"\n};\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\",\n    \"text-align\": \"center\",\n    \"align-items\": \"center\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Hovered Country:\"), /*#__PURE__*/_createElementVNode(\"h3\", {\n  style: {\n    \"color\": \"red\"\n  },\n  id: \"hover-value2\"\n}, \"Move your mouse\")], -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Selected Countries:\", -1 /* HOISTED */));\nconst _hoisted_13 = {\n  style: {\n    \"display\": \"inline\"\n  }\n};\nconst _hoisted_14 = {\n  ref: \"chart\",\n  style: {\n    \"position\": \"relative\",\n    \"width\": \"75%\",\n    \"height\": \"80%\",\n    \"margin-left\": \"25%\",\n    \"margin-top\": \"33%\"\n  }\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2, _createElementVNode(\"select\", {\n    class: \"prio\",\n    onChange: _cache[0] || (_cache[0] = (...args) => _ctx.updateFertilizerType && _ctx.updateFertilizerType(...args))\n  }, _hoisted_6, 32 /* HYDRATE_EVENTS */), _hoisted_7, _createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.zoomIn && _ctx.zoomIn(...args))\n  }, \"+\"), _createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.zoomOut && _ctx.zoomOut(...args))\n  }, \"-\"), _hoisted_8, _createElementVNode(\"button\", {\n    class: \"button-container\",\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.clearSelection && _ctx.clearSelection(...args))\n  }, \" Clear Selection \"), _hoisted_9, _ctx.selectedStates.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"button-container\",\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.navigateToCharts && _ctx.navigateToCharts(...args))\n  }, \"Go to charts\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_hoisted_11, _hoisted_12, _createElementVNode(\"div\", _hoisted_13, [_createCommentVNode(\" up to down \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedStates, state => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: state.id\n    }, _toDisplayString(state.id) + \": \" + _toDisplayString(state.title), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" right to left \"), _createCommentVNode(\" <h4 style=\\\"display:inline; margin:10px;\\\" v-for=\\\"state in selectedStates\\\" :key=\\\"state.id\\\"> {{ state.id }} :\\n           {{ state.title }} </h4> \")])]), _createElementVNode(\"div\", _hoisted_14, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","style","type","id","min","max","step","value","_hoisted_3","_hoisted_4","_hoisted_5","ref","_hoisted_1","_hoisted_2","onChange","_cache","args","_ctx","updateFertilizerType","_hoisted_7","onClick","zoomIn","zoomOut","_hoisted_8","clearSelection","_hoisted_9","selectedStates","length","_createElementBlock","navigateToCharts","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_createCommentVNode","_Fragment","_renderList","state","key","_toDisplayString","title","_hoisted_14"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\FloraMaps.vue"],"sourcesContent":["<template>\n   <div class=\"prio2\" style=\"display: flex; justify-content: center; margin-top: 10px;\">\n      <h3>Select year</h3>\n      <input type=\"range\" id=\"year-slider\" min=\"1961\" max=\"2019\" step=\"1\" value=\"1961\">\n      <button id=\"play-button\">Play</button>\n   </div>\n   <h3>Select fertilizer</h3>\n   <select class=\"prio\" @change=\"updateFertilizerType\">\n      <option value=\"nitrogen\">Nitrogen Derived</option>\n      <option value=\"phosphorous\">Phosphorous Derived</option>\n      <option value=\"potassium\">Potassium Derived</option>\n   </select>\n\n   <br>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n   <br>\n   <button v-if=\"selectedStates.length > 1\" class=\"button-container\" @click=\"navigateToCharts\">Go to charts</button>\n\n   <div class=\"prio\">\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\n      </div>\n      <h2>Selected Countries:</h2>\n      <div style=\"display:inline\">\n         <!-- up to down -->\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\n            {{ state.id }}: {{ state.title }}\n         </h4>\n\n         <!-- right to left -->\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n           {{ state.title }} </h4> -->\n      </div>\n\n   </div>\n\n   <div ref=\"chart\" style=\"position: relative; width: 75%; height: 80%; margin-left: 25%; margin-top: 33%;\">\n   </div>\n</template>\n\n\n<script>\nimport { ref, reactive } from 'vue';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nexport default {\n   data() {\n      return {\n         selectedStates: ref([]),\n         currentZoom: 1,\n         // name: \"charts\"\n      }\n   },\n   mounted() {\n      const svg = d3.select(this.$refs.chart)\n         .append(\"svg\")\n         .attr('width', '75%')\n         .attr('height', '100%')\n         .style(\"position\", \"fixed\")\n         .style('left', '25%')\n         .style('top', '20%');\n\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n      d3.xml(require(\"@/assets/world.svg\"))\n         .then(data => {\n\n            // Llama a la función después de cargar y agregar el mapa SVG\n            this.getDataFromAPI();\n\n            const importedNode = document.importNode(data.documentElement, true);\n            svg.node().appendChild(importedNode);\n\n            // Obtener todos los elementos \"path\" del SVG\n            const paths = svg.selectAll('path');\n\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n            paths\n               .on('click', this.changeColorOnClick)\n               .on('mouseover', this.changeColorOnHover)\n               .on('mouseout', this.restoreColorOnHover);\n\n            // Agregar zoom al mapa\n            const zoom = d3.zoom()\n               .scaleExtent([1, 8]) // Definir los límites de zoom\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n            // Inicializar el estado del zoom\n            this.currentZoom = 1;\n\n\n         })\n         .catch(error => {\n            console.error(error);\n         });\n      const countries = this.$route.query.countries;\n      if (countries) {\n         const countryList = countries.split(\",\");\n         const selectedCountries = countryList.join(\", \");\n      }\n\n      // Añadir el controlador de eventos al control deslizante\n      const yearSlider = document.getElementById('year-slider');\n      yearSlider.addEventListener('input', (event) => {\n         this.updateMap(event.target.value);\n      });\n   },\n   methods: {\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n      changeColorOnClick(event) {\n         const path = event.target;\n\n         if (path.classList.contains('selectedPath')) {\n            // si ya está seleccionado, se quita el color\n            // path.style.fill = 'black';\n            this.updateMapColors();\n            path.classList.remove('selectedPath');\n            // se elimina el país de la lista de países seleccionados\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n         } else {\n            // si no está seleccionado, se agrega el color\n            // path.style.fill = 'green';\n            this.updateMapColors();\n            path.classList.add('selectedPath');\n            // se agrega el país a la lista de países seleccionados\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\n            console.log(this.selectedStates);\n         }\n      },\n\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n      changeColorOnHover(event) {\n         const path = event.target;\n         if (!path.classList.contains('selectedPath')) {\n            // path.style.fill = 'purple';\n            path.style.fill = 'blue';\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n         }\n      },\n\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n      restoreColorOnHover(event) {\n         const path = event.target;\n\n         if (!path.classList.contains('selectedPath')) {\n            // path.style.fill = 'black';\n            this.updateMapColors();\n         }\n      },\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\n      clearSelection() {\n         // Vaciar el array de países seleccionados\n         this.selectedStates.splice(0);\n\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\n         selectedPaths.forEach(element => {\n            element.classList.remove(\"selectedPath\");\n            // element.style.fill = \"black\";\n            this.updateMapColors();\n         });\n      },\n      // Función para hacer zoom\n      zoomIn() {\n         this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n         d3.select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar transición animada al zoom\n            .duration(500) // Duración de la transición\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n      },\n      // Función para hacer zoom out\n      zoomOut() {\n         this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n         d3.select('svg') // Seleccionar el elemento SVG\n            .transition() // Agregar una transición suave al zoom\n            .duration(500) // Duración de la transición (en milisegundos)\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n\n      },\n      // Función para hacer zoom con el scroll del ratón y draggear el mapa\n      zoomed(event) {\n         this.currentZoom = event.transform.k;\n         d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n      },\n      navigateToCharts() {\n         const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n         this.$router.push({ name: \"charts\", query: { countries: selectedCountries } });\n      },\n      getDataFromAPI() {\n         const apiUrl = `http://49.12.36.190/api/regions-fertilizers-flora${}`;\n\n      axios.get(apiUrl)\n         .then(response => {\n            const data = response.data;\n            this.updateMapValues(data);\n         })\n         .catch(error => {\n            console.error(error);\n         });\n   },\n\n   updateMapValues(data) {\n      const paths = document.querySelectorAll('path');\n      const tooltip = document.createElement('div'); // Crea el elemento div para el tooltip\n      tooltip.style.position = 'absolute';\n      tooltip.style.backgroundColor = 'white';\n      tooltip.style.border = '1px solid gray';\n      tooltip.style.padding = '5px';\n      tooltip.style.pointerEvents = 'none';\n      tooltip.style.display = 'none'; // Oculta el tooltip por defecto\n      document.body.appendChild(tooltip); // Agrega el tooltip al body\n\n      paths.forEach(path => {\n         const code = path.getAttribute('id');\n         const value = data.find(item => item.code === code)?.amount ?? 0;\n         path.setAttribute('amount', value);\n\n         path.addEventListener('mouseover', () => {\n            // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\n            const x = event.clientX;\n            const y = event.clientY;\n            tooltip.style.top = `${y}px`;\n            tooltip.style.left = `${x}px`;\n            tooltip.style.display = 'block'; // Muestra el tooltip\n            tooltip.textContent = `${path.getAttribute('title')}: ${value}`;\n\n         });\n\n         path.addEventListener('mousemove', () => {\n            // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\n            const x = event.clientX;\n            const y = event.clientY;\n            tooltip.style.top = `${y}px`;\n            tooltip.style.left = `${x}px`;\n         });\n\n         path.addEventListener('mouseout', () => {\n            // Oculta el tooltip cuando el mouse sale del elemento \"path\"\n            tooltip.style.display = 'none';\n         });\n      });\n      this.updateMapColors();\n   },\n   createLegend(colorScale, colors) {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById('legend-container');\n      if (existingLegend) {\n         existingLegend.remove();\n      }\n\n      const legendContainer = document.createElement('div');\n      legendContainer.setAttribute('id', 'legend-container');\n      legendContainer.style.display = 'flex';\n      legendContainer.style.flexDirection = 'row';\n      legendContainer.style.alignItems = 'center';\n      legendContainer.style.justifyContent = 'center';\n      legendContainer.style.marginTop = '10px';\n\n      colors.forEach((color, index) => {\n         const colorBox = document.createElement('div');\n         colorBox.style.backgroundColor = color;\n         colorBox.style.width = '20px';\n         colorBox.style.height = '20px';\n         colorBox.style.margin = '0 5px';\n\n         const rangeText = document.createElement('span');\n         rangeText.style.marginLeft = '5px';\n         rangeText.style.marginRight = '10px';\n         const range = colorScale.invertExtent(color);\n         // Caso especial para el primer rango (0.00 - 0.00)\n         if (index === 0) {\n            rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\n         } else {\n            rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n         }\n\n         const legendItem = document.createElement('div');\n         legendItem.style.display = 'flex';\n         legendItem.style.alignItems = 'center';\n         legendItem.appendChild(colorBox);\n         legendItem.appendChild(rangeText);\n\n         legendContainer.appendChild(legendItem);\n      });\n\n      // Agrega la leyenda al final del body\n      document.body.appendChild(legendContainer);\n   },\n   updateMapColors() {\n      const paths = document.querySelectorAll('path');\n      const colors = [\n         '#F5E1F7',\n         '#E6B8E6',\n         '#D7A3D3',\n         '#C68FC6',\n         '#B67AB6',\n         '#A666A3',\n         '#965291',\n         '#854D80',\n         '#73386E',\n         '#62245C'\n\n      ];\n      const amounts = Array.from(paths, path => Number(path.getAttribute('amount')));\n      const maxAmount = Math.max(...amounts);\n      const colorScale = d3.scaleQuantile()\n         .domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\n         .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\n\n      paths.forEach(path => {\n         const amount = Number(path.getAttribute('amount'));\n         const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\n         path.style.fill = color;\n      });\n\n      // Crear leyenda\n      this.createLegend(colorScale, colors);\n   },\n\n   updateFertilizerType(event) {\n      selectedFertilizer.value = event.target.value;\n      this.getDataFromAPI();\n   },\n\n   addLegend() {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById('map-legend');\n      if (existingLegend) {\n         existingLegend.remove();\n      }\n\n      // A continuación, el código existente para agregar la leyenda\n      const legend = L.control({ position: 'bottomright' });\n\n      legend.onAdd = () => {\n         const div = L.DomUtil.create('div', 'info legend');\n         div.id = 'map-legend'; // Agrega un ID para que podamos seleccionarlo y eliminarlo fácilmente\n         const grades = this.legendGrades;\n         const labels = [];\n\n         for (let i = 0; i < grades.length; i++) {\n            labels.push(\n               '<i style=\"background:' +\n               this.getColor(grades[i] + 1) +\n               '\"></i> ' +\n               grades[i] +\n               (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+')\n            );\n         }\n\n         div.innerHTML = labels.join('');\n         return div;\n      };\n\n      legend.addTo(this.map);\n   },\n   updateMap(year) {\n      // Aquí es donde puedes actualizar el mapa con los datos correspondientes al año\n      console.log(\"Año seleccionado:\", year);\n      // Llama a las funciones necesarias para actualizar el mapa aquí\n   },\n   playYears() {\n      const startYear = 1961;\n      const endYear = 2019;\n      let currentYear = startYear;\n\n      const interval = setInterval(() => {\n         updateMap(currentYear);\n         yearSlider.value = currentYear;\n         currentYear++;\n\n         if (currentYear > endYear) {\n            clearInterval(interval);\n         }\n      }, 1000); // Cambia cada 1000 milisegundos (1 segundo)\n   }\n}\n};\n\n</script>\n\n\n<style scoped>\nbutton {\n   background-color: #604caf;\n   color: #fff;\n   border: none;\n   border-radius: 5px;\n   padding: 10px;\n   font-size: 16px;\n   cursor: pointer;\n}\n\nbutton:hover {\n   background-color: #3b285f;\n}\n\n.prio {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.prio2 {\n   position: relative;\n   z-index: 1;\n}\n\nh2,\nh3,\nh4 {\n   color: red;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.map-container {\n   width: 100vw;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n\n.selected {\n   fill: green;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n   transition: fill 0.5s ease-in-out;\n}\n\n#legend-container {\n   position: absolute;\n   bottom: -50px;\n   left: 50%;\n   transform: translateX(-50%);\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n   justify-content: center;\n   margin-top: 10px;\n}\n\n#year-slider {\n   width: 50%;\n}\n\n/* div[ref=\"chart\"] {\n  margin-bottom: 50px;\n} */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}