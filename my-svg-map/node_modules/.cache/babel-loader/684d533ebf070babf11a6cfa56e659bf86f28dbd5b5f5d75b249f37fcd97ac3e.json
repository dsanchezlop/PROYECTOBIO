{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive } from \"vue\";\nimport * as d3 from \"d3\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedStates: ref([]),\n      currentZoom: 1\n      // name: \"charts\"\n    };\n  },\n\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", \"75%\").attr(\"height\", \"100%\").style(\"position\", \"fixed\").style(\"left\", \"25%\").style(\"top\", \"20%\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      // Llama a la función después de cargar y agregar el mapa SVG\n      this.getDataFromAPI();\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Obtener todos los elementos \"path\" del SVG\n      const paths = svg.selectAll(\"path\");\n\n      // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n      paths.on(\"click\", this.changeColorOnClick).on(\"mouseover\", this.changeColorOnHover).on(\"mouseout\", this.restoreColorOnHover);\n\n      // Agregar zoom al mapa\n      const zoom = d3.zoom().scaleExtent([1, 8]) // Definir los límites de zoom\n      .on(\"zoom\", this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n      svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n      // Inicializar el estado del zoom\n      this.currentZoom = 1;\n    }).catch(error => {\n      console.error(error);\n    });\n    const countries = this.$route.query.countries;\n    if (countries) {\n      const countryList = countries.split(\",\");\n      const selectedCountries = countryList.join(\", \");\n    }\n\n    // Añadir el controlador de eventos al control deslizante\n    const yearSlider = document.getElementById(\"year-slider\");\n    yearSlider.addEventListener(\"input\", event => {\n      this.updateMap(event.target.value);\n    });\n  },\n  methods: {\n    // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n    changeColorOnClick(event) {\n      const path = event.target;\n      if (path.classList.contains(\"selectedPath\")) {\n        // si ya está seleccionado, se quita el color\n        // path.style.fill = 'black';\n        this.updateMapColors();\n        path.classList.remove(\"selectedPath\");\n        // se elimina el país de la lista de países seleccionados\n        this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n      } else {\n        // si no está seleccionado, se agrega el color\n        // path.style.fill = 'green';\n        this.updateMapColors();\n        path.classList.add(\"selectedPath\");\n        // se agrega el país a la lista de países seleccionados\n        this.selectedStates.push({\n          id: path.id,\n          title: path.getAttribute(\"title\")\n        });\n        console.log(this.selectedStates);\n      }\n    },\n    // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n    changeColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains(\"selectedPath\")) {\n        // path.style.fill = 'purple';\n        path.style.fill = \"blue\";\n        document.getElementById(\"hover-value2\").textContent = path.getAttribute(\"title\");\n      }\n    },\n    // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n    restoreColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains(\"selectedPath\")) {\n        // path.style.fill = 'black';\n        this.updateMapColors();\n      }\n    },\n    // Funcion para vaciar la array y quitar el color de los paises seleccionados\n    clearSelection() {\n      // Vaciar el array de países seleccionados\n      this.selectedStates.splice(0);\n\n      // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\n      selectedPaths.forEach(element => {\n        element.classList.remove(\"selectedPath\");\n        // element.style.fill = \"black\";\n        this.updateMapColors();\n      });\n    },\n    // Función para hacer zoom\n    zoomIn() {\n      this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n      d3.select(\"svg\") // Seleccionar el elemento SVG\n      .transition() // Agregar transición animada al zoom\n      .duration(500) // Duración de la transición\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n\n    // Función para hacer zoom out\n    zoomOut() {\n      this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n      d3.select(\"svg\") // Seleccionar el elemento SVG\n      .transition() // Agregar una transición suave al zoom\n      .duration(500) // Duración de la transición (en milisegundos)\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n\n    // Función para hacer zoom con el scroll del ratón y draggear el mapa\n    zoomed(event) {\n      this.currentZoom = event.transform.k;\n      d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n    },\n\n    navigateToCharts() {\n      const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n      this.$router.push({\n        name: \"charts\",\n        query: {\n          countries: selectedCountries\n        }\n      });\n    },\n    getDataFromAPI() {\n      const slider = document.getElementById(\"slider\");\n      const sliderValue = slider.value;\n      console.log(sliderValue);\n      const apiUrl = `http://49.12.36.190/api/regions-fertilizers-flora`;\n      axios.get(apiUrl).then(response => {\n        const data = response.data;\n        this.updateMapValues(data);\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    updateMapValues(data) {\n      const paths = document.querySelectorAll(\"path\");\n      const tooltip = document.createElement(\"div\"); // Crea el elemento div para el tooltip\n      tooltip.style.position = \"absolute\";\n      tooltip.style.backgroundColor = \"white\";\n      tooltip.style.border = \"1px solid gray\";\n      tooltip.style.padding = \"5px\";\n      tooltip.style.pointerEvents = \"none\";\n      tooltip.style.display = \"none\"; // Oculta el tooltip por defecto\n      document.body.appendChild(tooltip); // Agrega el tooltip al body\n\n      paths.forEach(path => {\n        const code = path.getAttribute(\"id\");\n        const value = data.find(item => item.code === code)?.amount ?? 0;\n        path.setAttribute(\"amount\", value);\n        path.addEventListener(\"mouseover\", () => {\n          // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n          tooltip.style.display = \"block\"; // Muestra el tooltip\n          tooltip.textContent = `${path.getAttribute(\"title\")}: ${value}`;\n        });\n        path.addEventListener(\"mousemove\", () => {\n          // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n        });\n        path.addEventListener(\"mouseout\", () => {\n          // Oculta el tooltip cuando el mouse sale del elemento \"path\"\n          tooltip.style.display = \"none\";\n        });\n      });\n      this.updateMapColors();\n    },\n    createLegend(colorScale, colors) {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById(\"legend-container\");\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n      const legendContainer = document.createElement(\"div\");\n      legendContainer.setAttribute(\"id\", \"legend-container\");\n      legendContainer.style.display = \"flex\";\n      legendContainer.style.flexDirection = \"row\";\n      legendContainer.style.alignItems = \"center\";\n      legendContainer.style.justifyContent = \"center\";\n      legendContainer.style.marginTop = \"10px\";\n      colors.forEach((color, index) => {\n        const colorBox = document.createElement(\"div\");\n        colorBox.style.backgroundColor = color;\n        colorBox.style.width = \"20px\";\n        colorBox.style.height = \"20px\";\n        colorBox.style.margin = \"0 5px\";\n        const rangeText = document.createElement(\"span\");\n        rangeText.style.marginLeft = \"5px\";\n        rangeText.style.marginRight = \"10px\";\n        const range = colorScale.invertExtent(color);\n        // Caso especial para el primer rango (0.00 - 0.00)\n        if (index === 0) {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\n        } else {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\n        }\n        const legendItem = document.createElement(\"div\");\n        legendItem.style.display = \"flex\";\n        legendItem.style.alignItems = \"center\";\n        legendItem.appendChild(colorBox);\n        legendItem.appendChild(rangeText);\n        legendContainer.appendChild(legendItem);\n      });\n\n      // Agrega la leyenda al final del body\n      document.body.appendChild(legendContainer);\n    },\n    updateMapColors() {\n      const paths = document.querySelectorAll(\"path\");\n      const colors = [\"#F5E1F7\", \"#E6B8E6\", \"#D7A3D3\", \"#C68FC6\", \"#B67AB6\", \"#A666A3\", \"#965291\", \"#854D80\", \"#73386E\", \"#62245C\"];\n      const amounts = Array.from(paths, path => Number(path.getAttribute(\"amount\")));\n      const maxAmount = Math.max(...amounts);\n      const colorScale = d3.scaleQuantile().domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\n      .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\n\n      paths.forEach(path => {\n        const amount = Number(path.getAttribute(\"amount\"));\n        const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\n        path.style.fill = color;\n      });\n\n      // Crear leyenda\n      this.createLegend(colorScale, colors);\n    },\n    updateFertilizerType(event) {\n      selectedFertilizer.value = event.target.value;\n      this.getDataFromAPI();\n    },\n    addLegend() {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById(\"map-legend\");\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n\n      // A continuación, el código existente para agregar la leyenda\n      const legend = L.control({\n        position: \"bottomright\"\n      });\n      legend.onAdd = () => {\n        const div = L.DomUtil.create(\"div\", \"info legend\");\n        div.id = \"map-legend\"; // Agrega un ID para que podamos seleccionarlo y eliminarlo fácilmente\n        const grades = this.legendGrades;\n        const labels = [];\n        for (let i = 0; i < grades.length; i++) {\n          labels.push('<i style=\"background:' + this.getColor(grades[i] + 1) + '\"></i> ' + grades[i] + (grades[i + 1] ? \"&ndash;\" + grades[i + 1] + \"<br>\" : \"+\"));\n        }\n        div.innerHTML = labels.join(\"\");\n        return div;\n      };\n      legend.addTo(this.map);\n    },\n    updateMap(year) {\n      // Aquí es donde puedes actualizar el mapa con los datos correspondientes al año\n      console.log(\"Año seleccionado:\", year);\n      // Llama a las funciones necesarias para actualizar el mapa aquí\n    },\n\n    playYears() {\n      const startYear = 1961;\n      const endYear = 2019;\n      let currentYear = startYear;\n      const interval = setInterval(() => {\n        updateMap(currentYear);\n        yearSlider.value = currentYear;\n        currentYear++;\n        if (currentYear > endYear) {\n          clearInterval(interval);\n        }\n      }, 1000); // Cambia cada 1000 milisegundos (1 segundo)\n    }\n  }\n};","map":{"version":3,"names":["ref","reactive","d3","axios","data","selectedStates","currentZoom","mounted","svg","select","$refs","chart","append","attr","style","xml","require","then","getDataFromAPI","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","changeColorOnClick","changeColorOnHover","restoreColorOnHover","zoom","scaleExtent","zoomed","call","catch","error","console","countries","$route","query","countryList","split","selectedCountries","join","yearSlider","getElementById","addEventListener","event","updateMap","target","value","methods","path","classList","contains","updateMapColors","remove","filter","state","id","add","push","title","getAttribute","log","fill","textContent","clearSelection","splice","selectedPaths","querySelectorAll","forEach","element","zoomIn","Math","min","transition","duration","zoomOut","max","transform","k","navigateToCharts","map","$router","name","slider","sliderValue","apiUrl","get","response","updateMapValues","tooltip","createElement","position","backgroundColor","border","padding","pointerEvents","display","body","code","find","item","amount","setAttribute","x","clientX","y","clientY","top","left","createLegend","colorScale","colors","existingLegend","legendContainer","flexDirection","alignItems","justifyContent","marginTop","color","index","colorBox","width","height","margin","rangeText","marginLeft","marginRight","range","invertExtent","toFixed","legendItem","amounts","Array","from","Number","maxAmount","scaleQuantile","domain","slice","updateFertilizerType","selectedFertilizer","addLegend","legend","L","control","onAdd","div","DomUtil","create","grades","legendGrades","labels","i","length","getColor","innerHTML","addTo","year","playYears","startYear","endYear","currentYear","interval","setInterval","clearInterval"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\FloraMaps.vue"],"sourcesContent":["<template>\n  <div\n    class=\"prio2\"\n    style=\"display: flex; justify-content: center; margin-top: 10px\"\n  >\n    <h3>Select year</h3>\n    <input\n      type=\"range\"\n      id=\"year-slider\"\n      min=\"1961\"\n      max=\"2019\"\n      step=\"1\"\n      value=\"1961\"\n    />\n    <button id=\"play-button\">Play</button>\n  </div>\n  <h3>Select fertilizer</h3>\n  <select class=\"prio\" @change=\"updateFertilizerType\">\n    <option value=\"nitrogen\">Nitrogen Derived</option>\n    <option value=\"phosphorous\">Phosphorous Derived</option>\n    <option value=\"potassium\">Potassium Derived</option>\n  </select>\n\n  <br />\n  <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n  <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n  <br />\n  <button class=\"button-container\" @click=\"clearSelection\">\n    Clear Selection\n  </button>\n  <br />\n  <button\n    v-if=\"selectedStates.length > 1\"\n    class=\"button-container\"\n    @click=\"navigateToCharts\"\n  >\n    Go to charts\n  </button>\n\n  <div class=\"prio\">\n    <div style=\"display: flex; text-align: center; align-items: center\">\n      <h2>Hovered Country:</h2>\n      <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\n    </div>\n    <h2>Selected Countries:</h2>\n    <div style=\"display: inline\">\n      <!-- up to down -->\n      <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\n        {{ state.id }}: {{ state.title }}\n      </h4>\n\n      <!-- right to left -->\n      <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n           {{ state.title }} </h4> -->\n    </div>\n  </div>\n\n  <div\n    ref=\"chart\"\n    style=\"\n      position: relative;\n      width: 75%;\n      height: 80%;\n      margin-left: 25%;\n      margin-top: 33%;\n    \"\n  ></div>\n</template>\n\n<script>\nimport { ref, reactive } from \"vue\";\nimport * as d3 from \"d3\";\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      selectedStates: ref([]),\n      currentZoom: 1,\n      // name: \"charts\"\n    };\n  },\n  mounted() {\n    const svg = d3\n      .select(this.$refs.chart)\n      .append(\"svg\")\n      .attr(\"width\", \"75%\")\n      .attr(\"height\", \"100%\")\n      .style(\"position\", \"fixed\")\n      .style(\"left\", \"25%\")\n      .style(\"top\", \"20%\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\"))\n      .then((data) => {\n        // Llama a la función después de cargar y agregar el mapa SVG\n        this.getDataFromAPI();\n\n        const importedNode = document.importNode(data.documentElement, true);\n        svg.node().appendChild(importedNode);\n\n        // Obtener todos los elementos \"path\" del SVG\n        const paths = svg.selectAll(\"path\");\n\n        // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n        paths\n          .on(\"click\", this.changeColorOnClick)\n          .on(\"mouseover\", this.changeColorOnHover)\n          .on(\"mouseout\", this.restoreColorOnHover);\n\n        // Agregar zoom al mapa\n        const zoom = d3\n          .zoom()\n          .scaleExtent([1, 8]) // Definir los límites de zoom\n          .on(\"zoom\", this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n        svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n        // Inicializar el estado del zoom\n        this.currentZoom = 1;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    const countries = this.$route.query.countries;\n    if (countries) {\n      const countryList = countries.split(\",\");\n      const selectedCountries = countryList.join(\", \");\n    }\n\n    // Añadir el controlador de eventos al control deslizante\n    const yearSlider = document.getElementById(\"year-slider\");\n    yearSlider.addEventListener(\"input\", (event) => {\n      this.updateMap(event.target.value);\n    });\n  },\n  methods: {\n    // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n    changeColorOnClick(event) {\n      const path = event.target;\n\n      if (path.classList.contains(\"selectedPath\")) {\n        // si ya está seleccionado, se quita el color\n        // path.style.fill = 'black';\n        this.updateMapColors();\n        path.classList.remove(\"selectedPath\");\n        // se elimina el país de la lista de países seleccionados\n        this.selectedStates = this.selectedStates.filter(\n          (state) => state.id !== path.id\n        );\n      } else {\n        // si no está seleccionado, se agrega el color\n        // path.style.fill = 'green';\n        this.updateMapColors();\n        path.classList.add(\"selectedPath\");\n        // se agrega el país a la lista de países seleccionados\n        this.selectedStates.push({\n          id: path.id,\n          title: path.getAttribute(\"title\"),\n        });\n        console.log(this.selectedStates);\n      }\n    },\n\n    // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n    changeColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains(\"selectedPath\")) {\n        // path.style.fill = 'purple';\n        path.style.fill = \"blue\";\n        document.getElementById(\"hover-value2\").textContent =\n          path.getAttribute(\"title\");\n      }\n    },\n\n    // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n    restoreColorOnHover(event) {\n      const path = event.target;\n\n      if (!path.classList.contains(\"selectedPath\")) {\n        // path.style.fill = 'black';\n        this.updateMapColors();\n      }\n    },\n    // Funcion para vaciar la array y quitar el color de los paises seleccionados\n    clearSelection() {\n      // Vaciar el array de países seleccionados\n      this.selectedStates.splice(0);\n\n      // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\n      selectedPaths.forEach((element) => {\n        element.classList.remove(\"selectedPath\");\n        // element.style.fill = \"black\";\n        this.updateMapColors();\n      });\n    },\n    // Función para hacer zoom\n    zoomIn() {\n      this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n      d3.select(\"svg\") // Seleccionar el elemento SVG\n        .transition() // Agregar transición animada al zoom\n        .duration(500) // Duración de la transición\n        .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n    // Función para hacer zoom out\n    zoomOut() {\n      this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n      d3.select(\"svg\") // Seleccionar el elemento SVG\n        .transition() // Agregar una transición suave al zoom\n        .duration(500) // Duración de la transición (en milisegundos)\n        .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n    // Función para hacer zoom con el scroll del ratón y draggear el mapa\n    zoomed(event) {\n      this.currentZoom = event.transform.k;\n      d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n    },\n    navigateToCharts() {\n      const selectedCountries = this.selectedStates\n        .map((state) => state.title)\n        .join(\",\");\n      this.$router.push({\n        name: \"charts\",\n        query: { countries: selectedCountries },\n      });\n    },\n    getDataFromAPI() {\n      const slider = document.getElementById(\"slider\");\n      const sliderValue = slider.value;\n      console.log(sliderValue);\n      const apiUrl = `http://49.12.36.190/api/regions-fertilizers-flora`;\n\n      axios\n        .get(apiUrl)\n        .then((response) => {\n          const data = response.data;\n          this.updateMapValues(data);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n\n    updateMapValues(data) {\n      const paths = document.querySelectorAll(\"path\");\n      const tooltip = document.createElement(\"div\"); // Crea el elemento div para el tooltip\n      tooltip.style.position = \"absolute\";\n      tooltip.style.backgroundColor = \"white\";\n      tooltip.style.border = \"1px solid gray\";\n      tooltip.style.padding = \"5px\";\n      tooltip.style.pointerEvents = \"none\";\n      tooltip.style.display = \"none\"; // Oculta el tooltip por defecto\n      document.body.appendChild(tooltip); // Agrega el tooltip al body\n\n      paths.forEach((path) => {\n        const code = path.getAttribute(\"id\");\n        const value = data.find((item) => item.code === code)?.amount ?? 0;\n        path.setAttribute(\"amount\", value);\n\n        path.addEventListener(\"mouseover\", () => {\n          // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n          tooltip.style.display = \"block\"; // Muestra el tooltip\n          tooltip.textContent = `${path.getAttribute(\"title\")}: ${value}`;\n        });\n\n        path.addEventListener(\"mousemove\", () => {\n          // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\n          const x = event.clientX;\n          const y = event.clientY;\n          tooltip.style.top = `${y}px`;\n          tooltip.style.left = `${x}px`;\n        });\n\n        path.addEventListener(\"mouseout\", () => {\n          // Oculta el tooltip cuando el mouse sale del elemento \"path\"\n          tooltip.style.display = \"none\";\n        });\n      });\n      this.updateMapColors();\n    },\n    createLegend(colorScale, colors) {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById(\"legend-container\");\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n\n      const legendContainer = document.createElement(\"div\");\n      legendContainer.setAttribute(\"id\", \"legend-container\");\n      legendContainer.style.display = \"flex\";\n      legendContainer.style.flexDirection = \"row\";\n      legendContainer.style.alignItems = \"center\";\n      legendContainer.style.justifyContent = \"center\";\n      legendContainer.style.marginTop = \"10px\";\n\n      colors.forEach((color, index) => {\n        const colorBox = document.createElement(\"div\");\n        colorBox.style.backgroundColor = color;\n        colorBox.style.width = \"20px\";\n        colorBox.style.height = \"20px\";\n        colorBox.style.margin = \"0 5px\";\n\n        const rangeText = document.createElement(\"span\");\n        rangeText.style.marginLeft = \"5px\";\n        rangeText.style.marginRight = \"10px\";\n        const range = colorScale.invertExtent(color);\n        // Caso especial para el primer rango (0.00 - 0.00)\n        if (index === 0) {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(\n            2\n          )}`;\n        } else {\n          rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(\n            2\n          )}`;\n        }\n\n        const legendItem = document.createElement(\"div\");\n        legendItem.style.display = \"flex\";\n        legendItem.style.alignItems = \"center\";\n        legendItem.appendChild(colorBox);\n        legendItem.appendChild(rangeText);\n\n        legendContainer.appendChild(legendItem);\n      });\n\n      // Agrega la leyenda al final del body\n      document.body.appendChild(legendContainer);\n    },\n    updateMapColors() {\n      const paths = document.querySelectorAll(\"path\");\n      const colors = [\n        \"#F5E1F7\",\n        \"#E6B8E6\",\n        \"#D7A3D3\",\n        \"#C68FC6\",\n        \"#B67AB6\",\n        \"#A666A3\",\n        \"#965291\",\n        \"#854D80\",\n        \"#73386E\",\n        \"#62245C\",\n      ];\n      const amounts = Array.from(paths, (path) =>\n        Number(path.getAttribute(\"amount\"))\n      );\n      const maxAmount = Math.max(...amounts);\n      const colorScale = d3\n        .scaleQuantile()\n        .domain(amounts.filter((amount) => amount > 0)) // Excluye el valor 0.00 de la escala\n        .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\n\n      paths.forEach((path) => {\n        const amount = Number(path.getAttribute(\"amount\"));\n        const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\n        path.style.fill = color;\n      });\n\n      // Crear leyenda\n      this.createLegend(colorScale, colors);\n    },\n\n    updateFertilizerType(event) {\n      selectedFertilizer.value = event.target.value;\n      this.getDataFromAPI();\n    },\n\n    addLegend() {\n      // Elimina la leyenda anterior si existe\n      const existingLegend = document.getElementById(\"map-legend\");\n      if (existingLegend) {\n        existingLegend.remove();\n      }\n\n      // A continuación, el código existente para agregar la leyenda\n      const legend = L.control({ position: \"bottomright\" });\n\n      legend.onAdd = () => {\n        const div = L.DomUtil.create(\"div\", \"info legend\");\n        div.id = \"map-legend\"; // Agrega un ID para que podamos seleccionarlo y eliminarlo fácilmente\n        const grades = this.legendGrades;\n        const labels = [];\n\n        for (let i = 0; i < grades.length; i++) {\n          labels.push(\n            '<i style=\"background:' +\n              this.getColor(grades[i] + 1) +\n              '\"></i> ' +\n              grades[i] +\n              (grades[i + 1] ? \"&ndash;\" + grades[i + 1] + \"<br>\" : \"+\")\n          );\n        }\n\n        div.innerHTML = labels.join(\"\");\n        return div;\n      };\n\n      legend.addTo(this.map);\n    },\n    updateMap(year) {\n      // Aquí es donde puedes actualizar el mapa con los datos correspondientes al año\n      console.log(\"Año seleccionado:\", year);\n      // Llama a las funciones necesarias para actualizar el mapa aquí\n    },\n    playYears() {\n      const startYear = 1961;\n      const endYear = 2019;\n      let currentYear = startYear;\n\n      const interval = setInterval(() => {\n        updateMap(currentYear);\n        yearSlider.value = currentYear;\n        currentYear++;\n\n        if (currentYear > endYear) {\n          clearInterval(interval);\n        }\n      }, 1000); // Cambia cada 1000 milisegundos (1 segundo)\n    },\n  },\n};\n</script>\n\n<style scoped>\nbutton {\n  background-color: #604caf;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #3b285f;\n}\n\n.prio {\n  position: relative;\n  z-index: 1;\n  margin-right: auto;\n  width: fit-content;\n  height: fit-content;\n}\n\n.prio2 {\n  position: relative;\n  z-index: 1;\n}\n\nh2,\nh3,\nh4 {\n  color: red;\n}\n\n.selectedPath {\n  animation-name: slowchange;\n  animation-duration: 1.5s;\n  animation-fill-mode: forwards;\n  transition: fill 0.5s ease-in-out;\n}\n\npath:hover {\n  animation-name: hoverChange;\n  animation-duration: 1s;\n  animation-fill-mode: forwards;\n}\n\n.map-container {\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.button-container {\n  position: relative;\n  z-index: 1;\n  margin-right: auto;\n  width: fit-content;\n  height: fit-content;\n}\n\n.button-zoom {\n  position: relative;\n  z-index: 1;\n  margin-right: auto;\n  width: 2%;\n  height: 2%;\n}\n\n.draggeable {\n  cursor: move;\n}\n\n.selected {\n  fill: green;\n}\n\npath:hover {\n  animation-name: hoverChange;\n  animation-duration: 1s;\n  animation-fill-mode: forwards;\n  transition: fill 0.5s ease-in-out;\n}\n\n#legend-container {\n  position: absolute;\n  bottom: -50px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n#year-slider {\n  width: 50%;\n}\n\n/* div[ref=\"chart\"] {\n  margin-bottom: 50px;\n} */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}