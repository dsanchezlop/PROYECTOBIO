{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport SVG from 'svg.js';\nimport * as d3 from \"d3\";\nconst hoverValue = ref(\"Mouse your mouse\");\nconst selectedStates = ref([]);\nconst zoomLevel = ref(1);\nconst dragInfo = ref(null);\nfunction clearSelection() {\n  // Vaciar el array de países seleccionados\n  selectedStates.value.splice(0);\n\n  // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n  const selectedPaths = document.querySelectorAll(\".selectedPath\");\n  selectedPaths.forEach(element => {\n    element.classList.remove(\"selectedPath\");\n  });\n}\n\n//Adds to the path array a\nfunction setSelectedPath(hvalue) {\n  if (hvalue.target.attributes[\"title\"]) {\n    if (hvalue != null && hvalue.target != null) {\n      // Verificar si el valor ya está seleccionado\n      const title = hvalue.target.attributes[\"title\"].value;\n      const id = hvalue.target.attributes[\"id\"].value;\n      const isSelected = selectedStates.value.some(item => item.id === id);\n      if (isSelected) {\n        // Si el valor ya está seleccionado, eliminarlo del array y eliminar la clase\n        selectedStates.value = selectedStates.value.filter(item => item.id !== id);\n        hvalue.target.classList.remove(\"selectedPath\");\n      } else {\n        // Si el valor no está seleccionado, agregarlo al array y agregar la clase\n        selectedStates.value.push({\n          id,\n          title\n        });\n        hvalue.target.classList.add(\"selectedPath\");\n      }\n    }\n  }\n}\nfunction changeHoverValue(hvalue) {\n  if (hvalue != null && hvalue.target != null) {\n    let title = hvalue.target.attributes[\"title\"];\n    if (title != null) {\n      hoverValue.value = title.value;\n    }\n  }\n}\nfunction zoomIn() {\n  zoomLevel.value /= 0.90;\n}\nfunction zoomOut() {\n  if (zoomLevel.value <= 0.6) {} else {\n    zoomLevel.value *= 0.90;\n  }\n}\nfunction getMousePosition(evt) {\n  var CTM = svg.getScreenCTM();\n  return {\n    x: (evt.clientX - CTM.e) / CTM.a,\n    y: (evt.clientY - CTM.f) / CTM.d\n  };\n}\n\n// function startDrag(evt) {\n//   // store the initial mouse position and map position\n//   dragInfo.value = {\n//     x: evt.clientX,\n//     y: evt.clientY,\n//     mapX: parseFloat($refs.svgMap.style.left) || 0,\n//     mapY: parseFloat($refs.svgMap.style.top) || 0,\n//   };\n//   // set cursor to grabbing\n//   evt.target.style.cursor = 'grabbing';\n// }\n\n// function drag(evt) {\n//   if (dragInfo.value) {\n//     // calculate the offset between the current mouse position and the initial mouse position\n//     const dx = evt.clientX - dragInfo.value.x;\n//     const dy = evt.clientY - dragInfo.value.y;\n//     // set the new map position based on the offset\n//     $refs.svgMap.style.left = `${dragInfo.value.mapX + dx}px`;\n//     $refs.svgMap.style.top = `${dragInfo.value.mapY + dy}px`;\n//   }\n// }\n\n// function endDrag(evt) {\n//   dragInfo.value = null;\n//   evt.target.style.cursor = 'grab';\n// }\n\nexport default {\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", \"1009.6727\").attr(\"height\", \"665.96301\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Llamar a la función para hacer los países clicables\n      this.changeHoverValue(svg);\n      this.setSelectedPath(svg);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n};","map":{"version":3,"names":["ref","SVG","d3","hoverValue","selectedStates","zoomLevel","dragInfo","clearSelection","value","splice","selectedPaths","document","querySelectorAll","forEach","element","classList","remove","setSelectedPath","hvalue","target","attributes","title","id","isSelected","some","item","filter","push","add","changeHoverValue","zoomIn","zoomOut","getMousePosition","evt","CTM","svg","getScreenCTM","x","clientX","e","a","y","clientY","f","d","mounted","select","$refs","chart","append","attr","xml","require","then","data","importedNode","importNode","documentElement","node","appendChild","catch","error","console"],"sources":["/home/lasmas/GitHub/PROYECTOBIO/my-svg-map/src/components/SVGMap.vue"],"sourcesContent":["<template>\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\n   <br>\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\n\n   <div>\n      <h2> Selected Countries :</h2>\n      <div style=\"display:inline\">\n         <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\n            {{ state.title }} </h4>\n      </div>\n      <div style=\"display:flex; text-align: center; align-items: center;\">\n         <h2>Hovered Country:</h2>\n         <h3 style=\"color: black\"> {{ hoverValue }} </h3>\n      </div>\n   </div>\n   <div ref=\"chart\">\n\n   \n      \n      <!-- intentar que los path sean devuelto por la API -->\n      <svg\n        :style=\"{ transform: `scale(${zoomLevel})` }\" @mouseover=\"changeHoverValue\" @click=\"setSelectedPath\"\n        >\n         \n      </svg>\n\n\n   </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport SVG from 'svg.js';\nimport * as d3 from \"d3\";\n\nconst hoverValue = ref(\"Mouse your mouse\");\nconst selectedStates = ref([]);\nconst zoomLevel = ref(1);\nconst dragInfo = ref(null);\n\n\nfunction clearSelection() {\n   // Vaciar el array de países seleccionados\n   selectedStates.value.splice(0);\n\n   // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n   const selectedPaths = document.querySelectorAll(\".selectedPath\");\n   selectedPaths.forEach(element => {\n      element.classList.remove(\"selectedPath\");\n   });\n}\n\n//Adds to the path array a\nfunction setSelectedPath(hvalue) {\n   if (hvalue.target.attributes[\"title\"]) {\n      if (hvalue != null && hvalue.target != null) {\n         // Verificar si el valor ya está seleccionado\n         const title = hvalue.target.attributes[\"title\"].value;\n         const id = hvalue.target.attributes[\"id\"].value;\n         const isSelected = selectedStates.value.some(item => item.id === id);\n\n         if (isSelected) {\n            // Si el valor ya está seleccionado, eliminarlo del array y eliminar la clase\n            selectedStates.value = selectedStates.value.filter(item => item.id !== id);\n            hvalue.target.classList.remove(\"selectedPath\");\n         } else {\n            // Si el valor no está seleccionado, agregarlo al array y agregar la clase\n            selectedStates.value.push({ id, title });\n            hvalue.target.classList.add(\"selectedPath\");\n         }\n      }\n   }\n}\n\n\nfunction changeHoverValue(hvalue) {\n   if (hvalue != null && hvalue.target != null) {\n      let title = hvalue.target.attributes[\"title\"];\n      if (title != null) {\n         hoverValue.value = title.value;\n      }\n   }\n}\n\nfunction zoomIn() {\n   zoomLevel.value /= 0.90;\n}\n\nfunction zoomOut() {\n   if (zoomLevel.value <= 0.6) {\n\n   }\n   else {\n      zoomLevel.value *= 0.90;\n   }\n}\n\nfunction getMousePosition(evt) {\n   var CTM = svg.getScreenCTM();\n   return {\n      x: (evt.clientX - CTM.e) / CTM.a,\n      y: (evt.clientY - CTM.f) / CTM.d\n   };\n}\n\n// function startDrag(evt) {\n//   // store the initial mouse position and map position\n//   dragInfo.value = {\n//     x: evt.clientX,\n//     y: evt.clientY,\n//     mapX: parseFloat($refs.svgMap.style.left) || 0,\n//     mapY: parseFloat($refs.svgMap.style.top) || 0,\n//   };\n//   // set cursor to grabbing\n//   evt.target.style.cursor = 'grabbing';\n// }\n\n// function drag(evt) {\n//   if (dragInfo.value) {\n//     // calculate the offset between the current mouse position and the initial mouse position\n//     const dx = evt.clientX - dragInfo.value.x;\n//     const dy = evt.clientY - dragInfo.value.y;\n//     // set the new map position based on the offset\n//     $refs.svgMap.style.left = `${dragInfo.value.mapX + dx}px`;\n//     $refs.svgMap.style.top = `${dragInfo.value.mapY + dy}px`;\n//   }\n// }\n\n// function endDrag(evt) {\n//   dragInfo.value = null;\n//   evt.target.style.cursor = 'grab';\n// }\n\n \nexport default {\n  mounted() {\n    const svg = d3.select(this.$refs.chart)\n      .append(\"svg\")\n      .attr(\"width\", \"1009.6727\")\n      .attr(\"height\", \"665.96301\");\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\"))\n      .then(data => {\n        const importedNode = document.importNode(data.documentElement, true);\n        svg.node().appendChild(importedNode);\n\n        // Llamar a la función para hacer los países clicables\n        this.changeHoverValue(svg);\n        this.setSelectedPath(svg);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n}}\n\n</script>\n\n<style scoped>\n@keyframes slowchange {\n   to {\n      fill: indianred;\n   }\n}\n\n@keyframes hoverChange {\n   to {\n      fill: purple;\n   }\n}\n\npath {\n   fill: black;\n}\n\n.selectedPath {\n   animation-name: slowchange;\n   animation-duration: 1.5s;\n   animation-fill-mode: forwards;\n}\n\npath:hover {\n   animation-name: hoverChange;\n   animation-duration: 1s;\n   animation-fill-mode: forwards;\n}\n\n.logo {\n   height: 6em;\n   padding: 1.5em;\n   will-change: filter;\n}\n\n.logo:hover {\n   filter: drop-shadow(0 0 2em #646cffaa);\n}\n\n.logo.vue:hover {\n   filter: drop-shadow(0 0 2em #42b883aa);\n}\n\n.map-container {\n   width: 100vw;\n   /* ancho al 100% de la ventana */\n   /* height: 100vh; altura al 100% de la ventana */\n   display: flex;\n   justify-content: center;\n   /* centro horizontal */\n   align-items: center;\n   /* centro vertical */\n}\n\n.button-container {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: fit-content;\n   height: fit-content;\n}\n\n.button-zoom {\n   position: relative;\n   z-index: 1;\n   margin-right: auto;\n   width: 2%;\n   height: 2%;\n}\n\n.draggeable {\n   cursor: move;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}