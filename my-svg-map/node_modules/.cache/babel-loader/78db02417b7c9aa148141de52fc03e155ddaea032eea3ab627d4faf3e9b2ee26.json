{"ast":null,"code":"import HighchartsVue from \"highcharts-vue\";\nimport Highcharts from \"highcharts\";\nimport exportingInit from \"highcharts/modules/exporting\";\n\n// Inicialización de los módulos de Highcharts\nexportingInit(Highcharts);\nexport default {\n  name: \"Charts\",\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          type: \"line\",\n          zoomType: \"x\"\n        },\n        title: {\n          text: \"Fertilizantes aplicados (kg/ha) en Asia Oriental, Afganistán y Albania\"\n        },\n        xAxis: {\n          type: \"category\",\n          categories: [] // Aquí van los años\n        },\n\n        yAxis: {\n          title: {\n            text: \"Fertilizantes (kg/ha)\"\n          }\n        },\n        series: [],\n        // Aquí van los datos de los países\n        credits: {\n          enabled: false\n        },\n        exporting: {\n          enabled: true\n        }\n      }\n    };\n  },\n  components: {\n    highcharts: HighchartsVue\n  },\n  mounted() {\n    // Llamar a la API para obtener los datos\n    axios.get(\"https://ourworldindata.org/grapher/data/variables/3968.json?v=5\").then(response => {\n      const data = response.data;\n      const series = [];\n\n      // Filtrar los datos por países y fertilizantes\n      const countries = [\"Eastern Asia\", \"Afghanistan\", \"Albania\"];\n      const fertilizers = [\"Synthetic fertilizer - Nitrogen\"];\n      data.forEach(country => {\n        if (countries.includes(country.entityName)) {\n          const dataSeries = {\n            name: country.entityName,\n            data: []\n          };\n          country.data.forEach(yearData => {\n            const year = yearData[0];\n            const value = yearData[1];\n            if (fertilizers.includes(value.variableName)) {\n              dataSeries.data.push({\n                name: year,\n                y: value.value\n              });\n            }\n          });\n          series.push(dataSeries);\n        }\n      });\n\n      // Actualizar los datos del gráfico\n      const categories = series[0].data.map(data => data.name);\n      this.chartOptions.series = series;\n      this.chartOptions.xAxis.categories = categories;\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n};","map":{"version":3,"names":["HighchartsVue","Highcharts","exportingInit","name","data","chartOptions","chart","type","zoomType","title","text","xAxis","categories","yAxis","series","credits","enabled","exporting","components","highcharts","mounted","axios","get","then","response","countries","fertilizers","forEach","country","includes","entityName","dataSeries","yearData","year","value","variableName","push","y","map","catch","error","console"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\Charts.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts :options=\"chartOptions\"></highcharts>\n  </div>\n</template>\n\n<script>\nimport HighchartsVue from \"highcharts-vue\";\nimport Highcharts from \"highcharts\";\nimport exportingInit from \"highcharts/modules/exporting\";\n\n// Inicialización de los módulos de Highcharts\nexportingInit(Highcharts);\n\nexport default {\n  name: \"Charts\",\n  data() {\n    return {\n      chartOptions: {\n        chart: {\n          type: \"line\",\n          zoomType: \"x\",\n        },\n        title: {\n          text: \"Fertilizantes aplicados (kg/ha) en Asia Oriental, Afganistán y Albania\"\n        },\n        xAxis: {\n          type: \"category\",\n          categories: [], // Aquí van los años\n        },\n        yAxis: {\n          title: {\n            text: \"Fertilizantes (kg/ha)\",\n          },\n        },\n        series: [], // Aquí van los datos de los países\n        credits: {\n          enabled: false,\n        },\n        exporting: {\n          enabled: true,\n        },\n      },\n    };\n  },\n  components: {\n    highcharts: HighchartsVue,\n  },\n  mounted() {\n    // Llamar a la API para obtener los datos\n    axios\n      .get(\"https://ourworldindata.org/grapher/data/variables/3968.json?v=5\")\n      .then((response) => {\n        const data = response.data;\n        const series = [];\n\n        // Filtrar los datos por países y fertilizantes\n        const countries = [\"Eastern Asia\", \"Afghanistan\", \"Albania\"];\n        const fertilizers = [\"Synthetic fertilizer - Nitrogen\"];\n\n        data.forEach((country) => {\n          if (countries.includes(country.entityName)) {\n            const dataSeries = {\n              name: country.entityName,\n              data: [],\n            };\n\n            country.data.forEach((yearData) => {\n              const year = yearData[0];\n              const value = yearData[1];\n\n              if (fertilizers.includes(value.variableName)) {\n                dataSeries.data.push({\n                  name: year,\n                  y: value.value,\n                });\n              }\n            });\n\n            series.push(dataSeries);\n          }\n        });\n\n        // Actualizar los datos del gráfico\n        const categories = series[0].data.map((data) => data.name);\n\n        this.chartOptions.series = series;\n        this.chartOptions.xAxis.categories = categories;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  },\n};\n</script>\n"],"mappings":"AAOA,OAAOA,aAAY,MAAO,gBAAgB;AAC1C,OAAOC,UAAS,MAAO,YAAY;AACnC,OAAOC,aAAY,MAAO,8BAA8B;;AAExD;AACAA,aAAa,CAACD,UAAU,CAAC;AAEzB,eAAe;EACbE,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QACZC,KAAK,EAAE;UACLC,IAAI,EAAE,MAAM;UACZC,QAAQ,EAAE;QACZ,CAAC;QACDC,KAAK,EAAE;UACLC,IAAI,EAAE;QACR,CAAC;QACDC,KAAK,EAAE;UACLJ,IAAI,EAAE,UAAU;UAChBK,UAAU,EAAE,EAAE,CAAE;QAClB,CAAC;;QACDC,KAAK,EAAE;UACLJ,KAAK,EAAE;YACLC,IAAI,EAAE;UACR;QACF,CAAC;QACDI,MAAM,EAAE,EAAE;QAAE;QACZC,OAAO,EAAE;UACPC,OAAO,EAAE;QACX,CAAC;QACDC,SAAS,EAAE;UACTD,OAAO,EAAE;QACX;MACF;IACF,CAAC;EACH,CAAC;EACDE,UAAU,EAAE;IACVC,UAAU,EAAEnB;EACd,CAAC;EACDoB,OAAOA,CAAA,EAAG;IACR;IACAC,KAAI,CACDC,GAAG,CAAC,iEAAiE,EACrEC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMpB,IAAG,GAAIoB,QAAQ,CAACpB,IAAI;MAC1B,MAAMU,MAAK,GAAI,EAAE;;MAEjB;MACA,MAAMW,SAAQ,GAAI,CAAC,cAAc,EAAE,aAAa,EAAE,SAAS,CAAC;MAC5D,MAAMC,WAAU,GAAI,CAAC,iCAAiC,CAAC;MAEvDtB,IAAI,CAACuB,OAAO,CAAEC,OAAO,IAAK;QACxB,IAAIH,SAAS,CAACI,QAAQ,CAACD,OAAO,CAACE,UAAU,CAAC,EAAE;UAC1C,MAAMC,UAAS,GAAI;YACjB5B,IAAI,EAAEyB,OAAO,CAACE,UAAU;YACxB1B,IAAI,EAAE;UACR,CAAC;UAEDwB,OAAO,CAACxB,IAAI,CAACuB,OAAO,CAAEK,QAAQ,IAAK;YACjC,MAAMC,IAAG,GAAID,QAAQ,CAAC,CAAC,CAAC;YACxB,MAAME,KAAI,GAAIF,QAAQ,CAAC,CAAC,CAAC;YAEzB,IAAIN,WAAW,CAACG,QAAQ,CAACK,KAAK,CAACC,YAAY,CAAC,EAAE;cAC5CJ,UAAU,CAAC3B,IAAI,CAACgC,IAAI,CAAC;gBACnBjC,IAAI,EAAE8B,IAAI;gBACVI,CAAC,EAAEH,KAAK,CAACA;cACX,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;UAEFpB,MAAM,CAACsB,IAAI,CAACL,UAAU,CAAC;QACzB;MACF,CAAC,CAAC;;MAEF;MACA,MAAMnB,UAAS,GAAIE,MAAM,CAAC,CAAC,CAAC,CAACV,IAAI,CAACkC,GAAG,CAAElC,IAAI,IAAKA,IAAI,CAACD,IAAI,CAAC;MAE1D,IAAI,CAACE,YAAY,CAACS,MAAK,GAAIA,MAAM;MACjC,IAAI,CAACT,YAAY,CAACM,KAAK,CAACC,UAAS,GAAIA,UAAU;IACjD,CAAC,EACA2B,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}