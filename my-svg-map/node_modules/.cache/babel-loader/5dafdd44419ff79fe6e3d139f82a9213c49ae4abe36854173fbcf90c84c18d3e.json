{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-46f53af0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"nitrogen\"\n}, \"Nitrogen Derived\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"phosphorous\"\n}, \"Phosphorous Derived\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"potassium\"\n}, \"Potassium Derived\", -1 /* HOISTED */));\nconst _hoisted_4 = [_hoisted_1, _hoisted_2, _hoisted_3];\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\",\n    \"justify-content\": \"center\",\n    \"margin-top\": \"10px\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"range\",\n  id: \"year-slider\",\n  min: \"1961\",\n  max: \"2019\",\n  step: \"1\",\n  value: \"1961\"\n}), /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"play-button\"\n}, \"Play\")], -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"prio\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"display\": \"flex\",\n    \"text-align\": \"center\",\n    \"align-items\": \"center\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Hovered Country:\"), /*#__PURE__*/_createElementVNode(\"h3\", {\n  style: {\n    \"color\": \"red\"\n  },\n  id: \"hover-value2\"\n}, \"Move your mouse\")], -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Selected Countries:\", -1 /* HOISTED */));\nconst _hoisted_12 = {\n  style: {\n    \"display\": \"inline\"\n  }\n};\nconst _hoisted_13 = {\n  ref: \"chart\",\n  style: {\n    \"position\": \"relative\",\n    \"width\": \"75%\",\n    \"height\": \"80%\",\n    \"margin-left\": \"25%\",\n    \"margin-top\": \"33%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"select\", {\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.updateFertilizerType && $options.updateFertilizerType(...args))\n  }, _hoisted_4, 32 /* HYDRATE_EVENTS */), _hoisted_5, _hoisted_6, _createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.zoomIn && $options.zoomIn(...args))\n  }, \"+\"), _createElementVNode(\"button\", {\n    class: \"button-zoom\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.zoomOut && $options.zoomOut(...args))\n  }, \"-\"), _hoisted_7, _createElementVNode(\"button\", {\n    class: \"button-container\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.clearSelection && $options.clearSelection(...args))\n  }, \" Clear Selection \"), _hoisted_8, $data.selectedStates.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"button-container\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.navigateToCharts && $options.navigateToCharts(...args))\n  }, \"Go to charts\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _hoisted_11, _createElementVNode(\"div\", _hoisted_12, [_createCommentVNode(\" up to down \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedStates, state => {\n    return _openBlock(), _createElementBlock(\"h4\", {\n      key: state.id\n    }, _toDisplayString(state.id) + \": \" + _toDisplayString(state.title), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" right to left \"), _createCommentVNode(\" <h4 style=\\\"display:inline; margin:10px;\\\" v-for=\\\"state in selectedStates\\\" :key=\\\"state.id\\\"> {{ state.id }} :\\r\\n           {{ state.title }} </h4> \")])]), _createElementVNode(\"div\", _hoisted_13, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","value","_hoisted_1","_hoisted_2","_hoisted_3","style","type","id","min","max","step","class","ref","onChange","_cache","args","$options","updateFertilizerType","_hoisted_5","_hoisted_6","onClick","zoomIn","zoomOut","_hoisted_7","clearSelection","_hoisted_8","$data","selectedStates","length","_createElementBlock","navigateToCharts","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_createCommentVNode","_Fragment","_renderList","state","key","_toDisplayString","title","_hoisted_13"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\SVGMap.vue"],"sourcesContent":["<template>\r\n   <select @change=\"updateFertilizerType\">\r\n      <option value=\"nitrogen\">Nitrogen Derived</option>\r\n      <option value=\"phosphorous\">Phosphorous Derived</option>\r\n      <option value=\"potassium\">Potassium Derived</option>\r\n   </select>\r\n   <div style=\"display: flex; justify-content: center; margin-top: 10px;\">\r\n      <input type=\"range\" id=\"year-slider\" min=\"1961\" max=\"2019\" step=\"1\" value=\"1961\">\r\n      <button id=\"play-button\">Play</button>\r\n   </div>\r\n   <br>\r\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\r\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\r\n   <br>\r\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\r\n   <br>\r\n   <button v-if=\"selectedStates.length > 1\" class=\"button-container\" @click=\"navigateToCharts\">Go to charts</button>\r\n\r\n   <div class=\"prio\">\r\n      <div style=\"display:flex; text-align: center; align-items: center;\">\r\n         <h2>Hovered Country:</h2>\r\n         <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\r\n      </div>\r\n      <h2>Selected Countries:</h2>\r\n      <div style=\"display:inline\">\r\n         <!-- up to down -->\r\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\r\n            {{ state.id }}: {{ state.title }}\r\n         </h4>\r\n\r\n         <!-- right to left -->\r\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\r\n           {{ state.title }} </h4> -->\r\n      </div>\r\n\r\n   </div>\r\n   \r\n   <div ref=\"chart\" style=\"position: relative; width: 75%; height: 80%; margin-left: 25%; margin-top: 33%;\">\r\n   </div>\r\n  \r\n</template>\r\n\r\n\r\n<script>\r\nimport { ref, reactive } from 'vue';\r\nimport * as d3 from \"d3\";\r\nimport axios from 'axios';\r\n\r\nconst selectedFertilizer = ref('nitrogen');\r\n\r\nexport default {\r\n   data() {\r\n      return {\r\n         selectedStates: ref([]),\r\n         currentZoom: 1,\r\n         // name: \"charts\"\r\n      }\r\n   },\r\n   mounted() {\r\n      const svg = d3.select(this.$refs.chart)\r\n         .append(\"svg\")\r\n         .attr('width', '75%')\r\n         .attr('height', '100%')\r\n         .style(\"position\", \"fixed\")\r\n         .style('left', '25%')\r\n         .style('top', '20%');\r\n\r\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\r\n      d3.xml(require(\"@/assets/world.svg\"))\r\n         .then(data => {\r\n\r\n            // Llama a la función después de cargar y agregar el mapa SVG\r\n            this.getDataFromAPI();\r\n\r\n            const importedNode = document.importNode(data.documentElement, true);\r\n            svg.node().appendChild(importedNode);\r\n\r\n            // Obtener todos los elementos \"path\" del SVG\r\n            const paths = svg.selectAll('path');\r\n\r\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\r\n            paths\r\n               .on('click', this.changeColorOnClick)\r\n               .on('mouseover', this.changeColorOnHover)\r\n               .on('mouseout', this.restoreColorOnHover);\r\n\r\n            // Agregar zoom al mapa\r\n            const zoom = d3.zoom()\r\n               .scaleExtent([1, 8]) // Definir los límites de zoom\r\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\r\n\r\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\r\n\r\n            // Inicializar el estado del zoom\r\n            this.currentZoom = 1;\r\n\r\n\r\n         })\r\n         .catch(error => {\r\n            console.error(error);\r\n         });\r\n      const countries = this.$route.query.countries;\r\n      if (countries) {\r\n         const countryList = countries.split(\",\");\r\n         const selectedCountries = countryList.join(\", \");\r\n      }\r\n\r\n      // Añadir el controlador de eventos al control deslizante\r\n      const yearSlider = document.getElementById('year-slider');\r\n      yearSlider.addEventListener('input', (event) => {\r\n         this.updateMap(event.target.value);\r\n      });\r\n   },\r\n   methods: {\r\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\r\n      changeColorOnClick(event) {\r\n         const path = event.target;\r\n\r\n         if (path.classList.contains('selectedPath')) {\r\n            // si ya está seleccionado, se quita el color\r\n            // path.style.fill = 'black';\r\n            path.classList.remove('selectedPath');\r\n            // se elimina el país de la lista de países seleccionados\r\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\r\n         } else {\r\n            // si no está seleccionado, se agrega el color\r\n            path.style.fill = 'green';\r\n            path.classList.add('selectedPath');\r\n            // se agrega el país a la lista de países seleccionados\r\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\r\n            console.log(this.selectedStates);\r\n         }\r\n      },\r\n\r\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\r\n      changeColorOnHover(event) {\r\n         const path = event.target;\r\n         if (!path.classList.contains('selectedPath')) {\r\n            // path.style.fill = 'purple';\r\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\r\n         }\r\n      },\r\n\r\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\r\n      restoreColorOnHover(event) {\r\n         const path = event.target;\r\n\r\n         if (!path.classList.contains('selectedPath')) {\r\n            // path.style.fill = 'black';\r\n         }\r\n      },\r\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\r\n      clearSelection() {\r\n         // Vaciar el array de países seleccionados\r\n         this.selectedStates.splice(0);\r\n\r\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\r\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\r\n         selectedPaths.forEach(element => {\r\n            element.classList.remove(\"selectedPath\");\r\n            // element.style.fill = \"black\";\r\n         });\r\n      },\r\n      // Función para hacer zoom\r\n      zoomIn() {\r\n         this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\r\n         d3.select('svg') // Seleccionar el elemento SVG\r\n            .transition() // Agregar transición animada al zoom\r\n            .duration(500) // Duración de la transición\r\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\r\n      },\r\n      // Función para hacer zoom out\r\n      zoomOut() {\r\n         this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\r\n         d3.select('svg') // Seleccionar el elemento SVG\r\n            .transition() // Agregar una transición suave al zoom\r\n            .duration(500) // Duración de la transición (en milisegundos)\r\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\r\n\r\n      },\r\n      // Función para hacer zoom con el scroll del ratón y draggear el mapa\r\n      zoomed(event) {\r\n         this.currentZoom = event.transform.k;\r\n         d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\r\n      },\r\n      navigateToCharts() {\r\n         const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\r\n         this.$router.push({ name: \"charts\", query: { countries: selectedCountries } });\r\n      },\r\n      getDataFromAPI() {\r\n         const apiUrl = `http://49.12.36.190/api/fertilizers-${selectedFertilizer.value}`;\r\n\r\n         axios.get(apiUrl)\r\n            .then(response => {\r\n               const data = response.data;\r\n               this.updateMapValues(data);\r\n            })\r\n            .catch(error => {\r\n               console.error(error);\r\n            });\r\n      },\r\n\r\n      updateMapValues(data) {\r\n         const paths = document.querySelectorAll('path');\r\n         const tooltip = document.createElement('div'); // Crea el elemento div para el tooltip\r\n         tooltip.style.position = 'absolute';\r\n         tooltip.style.backgroundColor = 'white';\r\n         tooltip.style.border = '1px solid gray';\r\n         tooltip.style.padding = '5px';\r\n         tooltip.style.pointerEvents = 'none';\r\n         tooltip.style.display = 'none'; // Oculta el tooltip por defecto\r\n         document.body.appendChild(tooltip); // Agrega el tooltip al body\r\n\r\n         paths.forEach(path => {\r\n            const code = path.getAttribute('id');\r\n            const value = data.find(item => item.code === code)?.amount ?? 0;\r\n            path.setAttribute('amount', value);\r\n\r\n            path.addEventListener('mouseover', () => {\r\n               // Obtener posición del mouse y actualizar el contenido y la posición del tooltip\r\n               const x = event.clientX;\r\n               const y = event.clientY;\r\n               tooltip.style.top = `${y}px`;\r\n               tooltip.style.left = `${x}px`;\r\n               tooltip.style.display = 'block'; // Muestra el tooltip\r\n               tooltip.textContent = `${path.getAttribute('title')}: ${value}`;\r\n\r\n            });\r\n\r\n            path.addEventListener('mousemove', () => {\r\n               // Actualiza la posición del tooltip mientras el mouse se mueve dentro del elemento \"path\"\r\n               const x = event.clientX;\r\n               const y = event.clientY;\r\n               tooltip.style.top = `${y}px`;\r\n               tooltip.style.left = `${x}px`;\r\n            });\r\n\r\n            path.addEventListener('mouseout', () => {\r\n               // Oculta el tooltip cuando el mouse sale del elemento \"path\"\r\n               tooltip.style.display = 'none';\r\n            });\r\n         });\r\n         this.updateMapColors();\r\n      },\r\n      createLegend(colorScale, colors) {\r\n         // Elimina la leyenda anterior si existe\r\n         const existingLegend = document.getElementById('legend-container');\r\n         if (existingLegend) {\r\n            existingLegend.remove();\r\n         }\r\n\r\n         const legendContainer = document.createElement('div');\r\n         legendContainer.setAttribute('id', 'legend-container');\r\n         legendContainer.style.display = 'flex';\r\n         legendContainer.style.flexDirection = 'row';\r\n         legendContainer.style.alignItems = 'center';\r\n         legendContainer.style.justifyContent = 'center';\r\n         legendContainer.style.marginTop = '10px';\r\n\r\n         colors.forEach((color, index) => {\r\n            const colorBox = document.createElement('div');\r\n            colorBox.style.backgroundColor = color;\r\n            colorBox.style.width = '20px';\r\n            colorBox.style.height = '20px';\r\n            colorBox.style.margin = '0 5px';\r\n\r\n            const rangeText = document.createElement('span');\r\n            rangeText.style.marginLeft = '5px';\r\n            rangeText.style.marginRight = '10px';\r\n            const range = colorScale.invertExtent(color);\r\n            // Caso especial para el primer rango (0.00 - 0.00)\r\n            if (index === 0) {\r\n               rangeText.textContent = `${range[0].toFixed(2)} - ${range[0].toFixed(2)}`;\r\n            } else {\r\n               rangeText.textContent = `${range[0].toFixed(2)} - ${range[1].toFixed(2)}`;\r\n            }\r\n\r\n            const legendItem = document.createElement('div');\r\n            legendItem.style.display = 'flex';\r\n            legendItem.style.alignItems = 'center';\r\n            legendItem.appendChild(colorBox);\r\n            legendItem.appendChild(rangeText);\r\n\r\n            legendContainer.appendChild(legendItem);\r\n         });\r\n\r\n         // Agrega la leyenda al final del body\r\n         document.body.appendChild(legendContainer);\r\n      },\r\n      updateMapColors() {\r\n         const paths = document.querySelectorAll('path');\r\n         const colors = [\r\n            '#F5E1F7',\r\n            '#E6B8E6',\r\n            '#D7A3D3',\r\n            '#C68FC6',\r\n            '#B67AB6',\r\n            '#A666A3',\r\n            '#965291',\r\n            '#854D80',\r\n            '#73386E',\r\n            '#62245C'\r\n\r\n         ];\r\n         const amounts = Array.from(paths, path => Number(path.getAttribute('amount')));\r\n         const maxAmount = Math.max(...amounts);\r\n         const colorScale = d3.scaleQuantile()\r\n            .domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\r\n            .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\r\n\r\n         paths.forEach(path => {\r\n            const amount = Number(path.getAttribute('amount'));\r\n            const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\r\n            path.style.fill = color;\r\n         });\r\n\r\n         // Crear leyenda\r\n         this.createLegend(colorScale, colors);\r\n      },\r\n\r\n      updateFertilizerType(event) {\r\n         selectedFertilizer.value = event.target.value;\r\n         this.getDataFromAPI();\r\n      },\r\n\r\n      addLegend() {\r\n         // Elimina la leyenda anterior si existe\r\n         const existingLegend = document.getElementById('map-legend');\r\n         if (existingLegend) {\r\n            existingLegend.remove();\r\n         }\r\n\r\n         // A continuación, el código existente para agregar la leyenda\r\n         const legend = L.control({ position: 'bottomright' });\r\n\r\n         legend.onAdd = () => {\r\n            const div = L.DomUtil.create('div', 'info legend');\r\n            div.id = 'map-legend'; // Agrega un ID para que podamos seleccionarlo y eliminarlo fácilmente\r\n            const grades = this.legendGrades;\r\n            const labels = [];\r\n\r\n            for (let i = 0; i < grades.length; i++) {\r\n               labels.push(\r\n                  '<i style=\"background:' +\r\n                  this.getColor(grades[i] + 1) +\r\n                  '\"></i> ' +\r\n                  grades[i] +\r\n                  (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+')\r\n               );\r\n            }\r\n\r\n            div.innerHTML = labels.join('');\r\n            return div;\r\n         };\r\n\r\n         legend.addTo(this.map);\r\n      },\r\n      updateMap(year) {\r\n         // Aquí es donde puedes actualizar el mapa con los datos correspondientes al año\r\n         console.log(\"Año seleccionado:\", year);\r\n         // Llama a las funciones necesarias para actualizar el mapa aquí\r\n      },\r\n      playYears() {\r\n         const startYear = 1961;\r\n         const endYear = 2019;\r\n         let currentYear = startYear;\r\n\r\n         const interval = setInterval(() => {\r\n            updateMap(currentYear);\r\n            yearSlider.value = currentYear;\r\n            currentYear++;\r\n\r\n            if (currentYear > endYear) {\r\n               clearInterval(interval);\r\n            }\r\n         }, 1000); // Cambia cada 1000 milisegundos (1 segundo)\r\n      },\r\n      colors() {\r\n         const paths = document.querySelectorAll('path');\r\n         const colors = [\r\n            '#F5E1F7',\r\n            '#E6B8E6',\r\n            '#D7A3D3',\r\n            '#C68FC6',\r\n            '#B67AB6',\r\n            '#A666A3',\r\n            '#965291',\r\n            '#854D80',\r\n            '#73386E',\r\n            '#62245C'\r\n\r\n         ];\r\n         const colorScale = d3.scaleQuantile()\r\n            .domain(amounts.filter(amount => amount > 0)) // Excluye el valor 0.00 de la escala\r\n            .range(colors.slice(1)); // Excluye el primer color del rango, ya que se manejará por separado\r\n\r\n         paths.forEach(path => {\r\n            const amount = Number(path.getAttribute('amount'));\r\n            const color = amount === 0 ? colors[0] : colorScale(amount); // Usa el primer color del arreglo para el rango 0.00 - 0.00\r\n            path.style.fill = color;\r\n         });\r\n      }\r\n\r\n// const playButton = document.getElementById('play-button');\r\n//       playButton.addEventListener('click', playYears);\r\n\r\n\r\n\r\n   }\r\n};\r\n\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\nbutton[type=\"button\"] {\r\n   background-color: #4CAF50;\r\n   color: #fff;\r\n   border: none;\r\n   border-radius: 5px;\r\n   padding: 10px;\r\n   font-size: 16px;\r\n   cursor: pointer;\r\n }\r\n \r\n button[type=\"button\"]:hover {\r\n   background-color: #3e8e41;\r\n }\r\n.prio {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: fit-content;\r\n   height: fit-content;\r\n}\r\n\r\nh2,\r\nh3,\r\nh4 {\r\n   color: red;\r\n}\r\n\r\n.selectedPath {\r\n   animation-name: slowchange;\r\n   animation-duration: 1.5s;\r\n   animation-fill-mode: forwards;\r\n}\r\n\r\npath:hover {\r\n   animation-name: hoverChange;\r\n   animation-duration: 1s;\r\n   animation-fill-mode: forwards;\r\n}\r\n\r\n.map-container {\r\n   width: 100vw;\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n}\r\n\r\n.button-container {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: fit-content;\r\n   height: fit-content;\r\n}\r\n\r\n.button-zoom {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: 2%;\r\n   height: 2%;\r\n}\r\n\r\n.draggeable {\r\n   cursor: move;\r\n}\r\n\r\n.selected {\r\n   fill: green;\r\n}\r\n\r\npath {\r\n   /* fill: black; */\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\n.selectedPath {\r\n   animation-name: slowchange;\r\n   animation-duration: 1.5s;\r\n   animation-fill-mode: forwards;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\npath:hover {\r\n   animation-name: hoverChange;\r\n   animation-duration: 1s;\r\n   animation-fill-mode: forwards;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\n#legend-container {\r\n   position: absolute;\r\n   bottom: -50px;\r\n   left: 50%;\r\n   transform: translateX(-50%);\r\n   display: flex;\r\n   flex-direction: row;\r\n   align-items: center;\r\n   justify-content: center;\r\n   margin-top: 10px;\r\n}\r\n\r\n#year-slider {\r\n   width: 50%;\r\n}\r\n\r\n/* div[ref=\"chart\"] {\r\n  margin-bottom: 50px;\r\n} */\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}