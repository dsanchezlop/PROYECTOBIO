{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport * as d3 from \"d3\";\nexport default {\n  data() {\n    return {\n      selectedStates: ref([]),\n      currentZoom: 1,\n      name: \"charts\"\n    };\n  },\n  mounted() {\n    const svg = d3.select(this.$refs.chart).append(\"svg\").attr('width', '75%').attr('height', '100%').style(\"position\", \"fixed\").style('left', '25%').style('top', '20%');\n\n    // Aquí es donde se carga el archivo world.svg y se agrega al SVG\n    d3.xml(require(\"@/assets/world.svg\")).then(data => {\n      const importedNode = document.importNode(data.documentElement, true);\n      svg.node().appendChild(importedNode);\n\n      // Obtener todos los elementos \"path\" del SVG\n      const paths = svg.selectAll('path');\n\n      // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\n      paths.on('click', this.changeColorOnClick).on('mouseover', this.changeColorOnHover).on('mouseout', this.restoreColorOnHover);\n\n      // Agregar zoom al mapa\n      const zoom = d3.zoom().scaleExtent([1, 8]) // Definir los límites de zoom\n      .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\n\n      svg.call(zoom); // Llamar a la función zoom en el elemento SVG\n\n      // Inicializar el estado del zoom\n      this.currentZoom = 1;\n    }).catch(error => {\n      console.error(error);\n    });\n    const countries = this.$route.query.countries;\n    if (countries) {\n      const countryList = countries.split(\",\");\n      const selectedCountries = countryList.join(\", \");\n    }\n  },\n  methods: {\n    // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\n    changeColorOnClick(event) {\n      const path = event.target;\n      if (path.classList.contains('selectedPath')) {\n        // si ya está seleccionado, se quita el color\n        path.style.fill = 'black';\n        path.classList.remove('selectedPath');\n        // se elimina el país de la lista de países seleccionados\n        this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\n      } else {\n        // si no está seleccionado, se agrega el color\n        path.style.fill = 'green';\n        path.classList.add('selectedPath');\n        // se agrega el país a la lista de países seleccionados\n        this.selectedStates.push({\n          id: path.id,\n          title: path.getAttribute('title')\n        });\n        console.log(this.selectedStates);\n      }\n    },\n    // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\n    changeColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains('selectedPath')) {\n        path.style.fill = 'purple';\n        document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\n      }\n    },\n    // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\n    restoreColorOnHover(event) {\n      const path = event.target;\n      if (!path.classList.contains('selectedPath')) {\n        path.style.fill = 'black';\n      }\n    },\n    // Funcion para vaciar la array y quitar el color de los paises seleccionados\n    clearSelection() {\n      // Vaciar el array de países seleccionados\n      this.selectedStates.splice(0);\n\n      // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\n      const selectedPaths = document.querySelectorAll(\".selectedPath\");\n      selectedPaths.forEach(element => {\n        element.classList.remove(\"selectedPath\");\n        element.style.fill = \"black\";\n      });\n    },\n    // Función para hacer zoom\n    zoomIn() {\n      this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\n      d3.select('svg') // Seleccionar el elemento SVG\n      .transition() // Agregar transición animada al zoom\n      .duration(500) // Duración de la transición\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n\n    // Función para hacer zoom out\n    zoomOut() {\n      this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\n      d3.select('svg') // Seleccionar el elemento SVG\n      .transition() // Agregar una transición suave al zoom\n      .duration(500) // Duración de la transición (en milisegundos)\n      .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\n    },\n\n    // Función para hacer zoom con el scroll del ratón y draggear el mapa\n    zoomed(event) {\n      this.currentZoom = event.transform.k;\n      d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\n    },\n\n    navigateToCharts() {\n      const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\n      this.$router.push({\n        name: \"charts\",\n        query: {\n          countries: selectedCountries\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","d3","data","selectedStates","currentZoom","name","mounted","svg","select","$refs","chart","append","attr","style","xml","require","then","importedNode","document","importNode","documentElement","node","appendChild","paths","selectAll","on","changeColorOnClick","changeColorOnHover","restoreColorOnHover","zoom","scaleExtent","zoomed","call","catch","error","console","countries","$route","query","countryList","split","selectedCountries","join","methods","event","path","target","classList","contains","fill","remove","filter","state","id","add","push","title","getAttribute","log","getElementById","textContent","clearSelection","splice","selectedPaths","querySelectorAll","forEach","element","zoomIn","Math","min","transition","duration","zoomOut","max","transform","k","navigateToCharts","map","$router"],"sources":["C:\\Users\\daniv\\Documents\\GitHub\\PROYECTOBIO\\my-svg-map\\src\\components\\SVGMap.vue"],"sourcesContent":["<template>\r\n   <button class=\"button-zoom\" @click=\"zoomIn\">+</button>\r\n   <button class=\"button-zoom\" @click=\"zoomOut\">-</button>\r\n   <br>\r\n   <button class=\"button-container\" @click=\"clearSelection\"> Clear Selection </button>\r\n   <br>\r\n   <button v-if=\"selectedStates.length > 1\" class=\"button-container\" @click=\"navigateToCharts\">Go to charts</button>\r\n\r\n   <div class=\"prio\">\r\n      <div style=\"display:flex; text-align: center; align-items: center;\">\r\n         <h2>Hovered Country:</h2>\r\n         <h3 style=\"color: red\" id=\"hover-value2\">Move your mouse</h3>\r\n      </div>\r\n      <h2>Selected Countries:</h2>\r\n      <div style=\"display:inline\">\r\n         <!-- up to down -->\r\n         <h4 v-for=\"state in selectedStates\" :key=\"state.id\">\r\n            {{ state.id }}: {{ state.title }}\r\n         </h4>\r\n\r\n         <!-- right to left -->\r\n         <!-- <h4 style=\"display:inline; margin:10px;\" v-for=\"state in selectedStates\" :key=\"state.id\"> {{ state.id }} :\r\n           {{ state.title }} </h4> -->\r\n      </div>\r\n   </div>\r\n   <div ref=\"chart\">\r\n   </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n   data() {\r\n      return {\r\n         selectedStates: ref([]),\r\n         currentZoom: 1,\r\n         name: \"charts\"\r\n      }\r\n   },\r\n   mounted() {\r\n      const svg = d3.select(this.$refs.chart)\r\n         .append(\"svg\")\r\n         .attr('width', '75%')\r\n         .attr('height', '100%')\r\n         .style(\"position\", \"fixed\")\r\n         .style('left', '25%')\r\n         .style('top', '20%');\r\n\r\n      // Aquí es donde se carga el archivo world.svg y se agrega al SVG\r\n      d3.xml(require(\"@/assets/world.svg\"))\r\n         .then(data => {\r\n            const importedNode = document.importNode(data.documentElement, true);\r\n            svg.node().appendChild(importedNode);\r\n\r\n            // Obtener todos los elementos \"path\" del SVG\r\n            const paths = svg.selectAll('path');\r\n\r\n            // Asignar las funciones \"changeColorOnClick\", \"changeColorOnHover\" y \"restoreColorOnHover\" a los eventos correspondientes de cada elemento \"path\"\r\n            paths\r\n               .on('click', this.changeColorOnClick)\r\n               .on('mouseover', this.changeColorOnHover)\r\n               .on('mouseout', this.restoreColorOnHover);\r\n\r\n            // Agregar zoom al mapa\r\n            const zoom = d3.zoom()\r\n               .scaleExtent([1, 8]) // Definir los límites de zoom\r\n               .on('zoom', this.zoomed); // Llamar a la función zoomed() cada vez que se haga zoom\r\n\r\n            svg.call(zoom); // Llamar a la función zoom en el elemento SVG\r\n\r\n            // Inicializar el estado del zoom\r\n            this.currentZoom = 1;\r\n         })\r\n         .catch(error => {\r\n            console.error(error);\r\n         });\r\n      const countries = this.$route.query.countries;\r\n      if (countries) {\r\n         const countryList = countries.split(\",\");\r\n         const selectedCountries = countryList.join(\", \");\r\n      }\r\n   },\r\n   methods: {\r\n      // Función para cambiar el color de fondo de un elemento \"path\" a verde al hacer clic en él\r\n      changeColorOnClick(event) {\r\n         const path = event.target;\r\n\r\n         if (path.classList.contains('selectedPath')) {\r\n            // si ya está seleccionado, se quita el color\r\n            path.style.fill = 'black';\r\n            path.classList.remove('selectedPath');\r\n            // se elimina el país de la lista de países seleccionados\r\n            this.selectedStates = this.selectedStates.filter(state => state.id !== path.id);\r\n         } else {\r\n            // si no está seleccionado, se agrega el color\r\n            path.style.fill = 'green';\r\n            path.classList.add('selectedPath');\r\n            // se agrega el país a la lista de países seleccionados\r\n            this.selectedStates.push({ id: path.id, title: path.getAttribute('title') });\r\n            console.log(this.selectedStates);\r\n         }\r\n      },\r\n\r\n      // Función para cambiar el color de fondo de un elemento \"path\" a púrpura al pasar el mouse por encima\r\n      changeColorOnHover(event) {\r\n         const path = event.target;\r\n         if (!path.classList.contains('selectedPath')) {\r\n            path.style.fill = 'purple';\r\n            document.getElementById(\"hover-value2\").textContent = path.getAttribute('title');\r\n         }\r\n      },\r\n\r\n      // Función para restaurar el color de fondo de un elemento \"path\" al dejar de pasar el mouse por encima\r\n      restoreColorOnHover(event) {\r\n         const path = event.target;\r\n\r\n         if (!path.classList.contains('selectedPath')) {\r\n            path.style.fill = 'black';\r\n         }\r\n      },\r\n      // Funcion para vaciar la array y quitar el color de los paises seleccionados\r\n      clearSelection() {\r\n         // Vaciar el array de países seleccionados\r\n         this.selectedStates.splice(0);\r\n\r\n         // Deseleccionar todos los elementos del DOM que tengan la clase \"selectedPath\"\r\n         const selectedPaths = document.querySelectorAll(\".selectedPath\");\r\n         selectedPaths.forEach(element => {\r\n            element.classList.remove(\"selectedPath\");\r\n            element.style.fill = \"black\";\r\n         });\r\n      },\r\n      // Función para hacer zoom\r\n      zoomIn() {\r\n         this.currentZoom = Math.min(this.currentZoom / 0.9, 1.5); // Incrementar el factor de zoom actual y asegurarse de que no exceda el límite máximo\r\n         d3.select('svg') // Seleccionar el elemento SVG\r\n            .transition() // Agregar transición animada al zoom\r\n            .duration(500) // Duración de la transición\r\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\r\n      },\r\n      // Función para hacer zoom out\r\n      zoomOut() {\r\n         this.currentZoom = Math.max(this.currentZoom * 0.9, 0.5); // Decrementar el factor de zoom actual y asegurarse de que no sea menor que el límite mínimo\r\n         d3.select('svg') // Seleccionar el elemento SVG\r\n            .transition() // Agregar una transición suave al zoom\r\n            .duration(500) // Duración de la transición (en milisegundos)\r\n            .attr(\"transform\", \"scale(\" + this.currentZoom + \")\"); // Aplicar la transformación de zoom\r\n\r\n      },\r\n      // Función para hacer zoom con el scroll del ratón y draggear el mapa\r\n      zoomed(event) {\r\n         this.currentZoom = event.transform.k;\r\n         d3.select(\"svg\").attr(\"transform\", event.transform); // Aplicar la transformación al elemento SVG actual\r\n      },\r\n      navigateToCharts() {\r\n         const selectedCountries = this.selectedStates.map(state => state.title).join(\",\");\r\n         this.$router.push({ name: \"charts\", query: { countries: selectedCountries } });\r\n      }\r\n\r\n   }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.prio {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: fit-content;\r\n   height: fit-content;\r\n}\r\n\r\nh2,\r\nh3,\r\nh4 {\r\n   color: red;\r\n}\r\n\r\n.selectedPath {\r\n   animation-name: slowchange;\r\n   animation-duration: 1.5s;\r\n   animation-fill-mode: forwards;\r\n}\r\n\r\npath:hover {\r\n   animation-name: hoverChange;\r\n   animation-duration: 1s;\r\n   animation-fill-mode: forwards;\r\n}\r\n\r\n.map-container {\r\n   width: 100vw;\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n}\r\n\r\n.button-container {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: fit-content;\r\n   height: fit-content;\r\n}\r\n\r\n.button-zoom {\r\n   position: relative;\r\n   z-index: 1;\r\n   margin-right: auto;\r\n   width: 2%;\r\n   height: 2%;\r\n}\r\n\r\n.draggeable {\r\n   cursor: move;\r\n}\r\n\r\n.selected {\r\n   fill: green;\r\n}\r\n\r\npath {\r\n   fill: black;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\n.selectedPath {\r\n   animation-name: slowchange;\r\n   animation-duration: 1.5s;\r\n   animation-fill-mode: forwards;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n\r\npath:hover {\r\n   animation-name: hoverChange;\r\n   animation-duration: 1s;\r\n   animation-fill-mode: forwards;\r\n   transition: fill 0.5s ease-in-out;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}